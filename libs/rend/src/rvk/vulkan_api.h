#pragma once
// clang-format off
// Generated by 'app_vkgen' with 'raw.githubusercontent.com/KhronosGroup/Vulkan-Docs/refs/tags/v1.4.308/xml/vk.xml'.
// Copyright 2015-2025 The Khronos Group Inc. SPDX-License-Identifier: Apache-2.0 OR MIT .

#include "core.h"

#define VK_MAX_PHYSICAL_DEVICE_NAME_SIZE 256
#define VK_UUID_SIZE 16
#define VK_LUID_SIZE 8
#define VK_MAX_EXTENSION_NAME_SIZE 256
#define VK_MAX_DESCRIPTION_SIZE 256
#define VK_MAX_MEMORY_TYPES 32
#define VK_MAX_MEMORY_HEAPS 16
#define VK_LOD_CLAMP_NONE 1000.0F
#define VK_REMAINING_MIP_LEVELS (~0U)
#define VK_REMAINING_ARRAY_LAYERS (~0U)
#define VK_REMAINING_3D_SLICES_EXT (~0U)
#define VK_WHOLE_SIZE (~0ULL)
#define VK_ATTACHMENT_UNUSED (~0U)
#define VK_TRUE 1
#define VK_FALSE 0
#define VK_QUEUE_FAMILY_IGNORED (~0U)
#define VK_QUEUE_FAMILY_EXTERNAL (~1U)
#define VK_QUEUE_FAMILY_FOREIGN_EXT (~2U)
#define VK_SUBPASS_EXTERNAL (~0U)
#define VK_MAX_DEVICE_GROUP_SIZE 32
#define VK_MAX_DRIVER_NAME_SIZE 256
#define VK_MAX_DRIVER_INFO_SIZE 256
#define VK_SHADER_UNUSED_KHR (~0U)
#define VK_MAX_GLOBAL_PRIORITY_SIZE 16
#define VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT 32
#define VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR 32
#define VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR 7
#define VK_SHADER_INDEX_UNUSED_AMDX (~0U)
#define VK_PARTITIONED_ACCELERATION_STRUCTURE_PARTITION_INDEX_GLOBAL_NV (~0U)

#define VK_LAYER_KHRONOS_validation "VK_LAYER_KHRONOS_validation"

#define VK_EXT_debug_utils "VK_EXT_debug_utils"
#define VK_EXT_memory_budget "VK_EXT_memory_budget"
#define VK_EXT_robustness2 "VK_EXT_robustness2"
#define VK_EXT_validation_features "VK_EXT_validation_features"
#define VK_KHR_driver_properties "VK_KHR_driver_properties"
#define VK_KHR_maintenance4 "VK_KHR_maintenance4"
#define VK_KHR_pipeline_executable_properties "VK_KHR_pipeline_executable_properties"
#define VK_KHR_present_id "VK_KHR_present_id"
#define VK_KHR_present_wait "VK_KHR_present_wait"
#define VK_KHR_surface "VK_KHR_surface"
#define VK_KHR_swapchain "VK_KHR_swapchain"
#define VK_KHR_win32_surface "VK_KHR_win32_surface"
#define VK_KHR_xcb_surface "VK_KHR_xcb_surface"

typedef u32 VkBool32;

typedef u64 VkDeviceAddress;

typedef u64 VkDeviceSize;

typedef struct VkExtent2D {
  u32 width;
  u32 height;
} VkExtent2D;

typedef struct VkExtent3D {
  u32 width;
  u32 height;
  u32 depth;
} VkExtent3D;

typedef u32 VkFlags;

typedef struct VkOffset2D {
  i32 x;
  i32 y;
} VkOffset2D;

typedef struct VkOffset3D {
  i32 x;
  i32 y;
  i32 z;
} VkOffset3D;

typedef struct VkRect2D {
  VkOffset2D offset;
  VkExtent2D extent;
} VkRect2D;

typedef enum {
  VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
  VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
  VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
  VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
  VK_ERROR_SURFACE_LOST_KHR = -1000000000,
  VK_ERROR_UNKNOWN = -13,
  VK_ERROR_FRAGMENTED_POOL = -12,
  VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
  VK_ERROR_TOO_MANY_OBJECTS = -10,
  VK_ERROR_INCOMPATIBLE_DRIVER = -9,
  VK_ERROR_FEATURE_NOT_PRESENT = -8,
  VK_ERROR_EXTENSION_NOT_PRESENT = -7,
  VK_ERROR_LAYER_NOT_PRESENT = -6,
  VK_ERROR_MEMORY_MAP_FAILED = -5,
  VK_ERROR_DEVICE_LOST = -4,
  VK_ERROR_INITIALIZATION_FAILED = -3,
  VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
  VK_ERROR_OUT_OF_HOST_MEMORY = -1,
  VK_SUCCESS = 0,
  VK_NOT_READY = 1,
  VK_TIMEOUT = 2,
  VK_EVENT_SET = 3,
  VK_EVENT_RESET = 4,
  VK_INCOMPLETE = 5,
  VK_SUBOPTIMAL_KHR = 1000001003,
} VkResult;

typedef enum {
  VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
  VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
  VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
  VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
  VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
  VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
  VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
  VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
  VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
  VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
  VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
  VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
  VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
  VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
  VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
  VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
  VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
  VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
  VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
  VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
  VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
  VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
  VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
  VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
  VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
  VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
  VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
  VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
  VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
  VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
  VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
  VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
  VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
  VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
  VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
  VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
  VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
  VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
  VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
  VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
  VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
  VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
  VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
  VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
  VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
  VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
  VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
  VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
  VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
  VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
  VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
  VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
  VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
  VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
  VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
  VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
  VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
  VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
  VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
  VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
  VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
  VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
  VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
  VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
  VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
  VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
  VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
  VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
  VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
  VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
  VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
  VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
  VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
  VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
  VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
  VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
  VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
  VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
  VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
  VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
  VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
  VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
  VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
  VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
  VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
  VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
  VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
  VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
  VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000,
  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001,
  VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002,
  VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003,
} VkStructureType;

typedef enum {
  VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
} VkPipelineCacheHeaderVersion;

typedef struct VkBaseInStructure {
  VkStructureType sType;
  const struct VkBaseInStructure* pNext;
} VkBaseInStructure;

typedef struct VkBaseOutStructure {
  VkStructureType sType;
  struct VkBaseOutStructure* pNext;
} VkBaseOutStructure;

typedef VkFlags VkAccessFlags;

typedef struct VkBuffer_T* VkBuffer;

typedef struct VkBufferMemoryBarrier {
  VkStructureType sType;
  const void* pNext;
  VkAccessFlags srcAccessMask;
  VkAccessFlags dstAccessMask;
  u32 srcQueueFamilyIndex;
  u32 dstQueueFamilyIndex;
  VkBuffer buffer;
  VkDeviceSize offset;
  VkDeviceSize size;
} VkBufferMemoryBarrier;

typedef struct VkDispatchIndirectCommand {
  u32 x;
  u32 y;
  u32 z;
} VkDispatchIndirectCommand;

typedef struct VkDrawIndexedIndirectCommand {
  u32 indexCount;
  u32 instanceCount;
  u32 firstIndex;
  i32 vertexOffset;
  u32 firstInstance;
} VkDrawIndexedIndirectCommand;

typedef struct VkDrawIndirectCommand {
  u32 vertexCount;
  u32 instanceCount;
  u32 firstVertex;
  u32 firstInstance;
} VkDrawIndirectCommand;

typedef enum {
  VK_IMAGE_LAYOUT_UNDEFINED = 0,
  VK_IMAGE_LAYOUT_GENERAL = 1,
  VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
  VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
  VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
  VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
  VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
  VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
  VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
  VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
  VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
  VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
} VkImageLayout;

typedef struct VkImage_T* VkImage;

typedef VkFlags VkImageAspectFlags;

typedef struct VkImageSubresourceRange {
  VkImageAspectFlags aspectMask;
  u32 baseMipLevel;
  u32 levelCount;
  u32 baseArrayLayer;
  u32 layerCount;
} VkImageSubresourceRange;

typedef struct VkImageMemoryBarrier {
  VkStructureType sType;
  const void* pNext;
  VkAccessFlags srcAccessMask;
  VkAccessFlags dstAccessMask;
  VkImageLayout oldLayout;
  VkImageLayout newLayout;
  u32 srcQueueFamilyIndex;
  u32 dstQueueFamilyIndex;
  VkImage image;
  VkImageSubresourceRange subresourceRange;
} VkImageMemoryBarrier;

typedef struct VkMemoryBarrier {
  VkStructureType sType;
  const void* pNext;
  VkAccessFlags srcAccessMask;
  VkAccessFlags dstAccessMask;
} VkMemoryBarrier;

typedef enum {
  VK_OBJECT_TYPE_UNKNOWN = 0,
  VK_OBJECT_TYPE_INSTANCE = 1,
  VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
  VK_OBJECT_TYPE_DEVICE = 3,
  VK_OBJECT_TYPE_QUEUE = 4,
  VK_OBJECT_TYPE_SEMAPHORE = 5,
  VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
  VK_OBJECT_TYPE_FENCE = 7,
  VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
  VK_OBJECT_TYPE_BUFFER = 9,
  VK_OBJECT_TYPE_IMAGE = 10,
  VK_OBJECT_TYPE_EVENT = 11,
  VK_OBJECT_TYPE_QUERY_POOL = 12,
  VK_OBJECT_TYPE_BUFFER_VIEW = 13,
  VK_OBJECT_TYPE_IMAGE_VIEW = 14,
  VK_OBJECT_TYPE_SHADER_MODULE = 15,
  VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
  VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
  VK_OBJECT_TYPE_RENDER_PASS = 18,
  VK_OBJECT_TYPE_PIPELINE = 19,
  VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
  VK_OBJECT_TYPE_SAMPLER = 21,
  VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
  VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
  VK_OBJECT_TYPE_FRAMEBUFFER = 24,
  VK_OBJECT_TYPE_COMMAND_POOL = 25,
  VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
  VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
  VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
  VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
  VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
} VkObjectType;

typedef struct VkPipelineCacheHeaderVersionOne {
  u32 headerSize;
  VkPipelineCacheHeaderVersion headerVersion;
  u32 vendorID;
  u32 deviceID;
  u8 pipelineCacheUUID[VK_UUID_SIZE];
} VkPipelineCacheHeaderVersionOne;

typedef enum {
  VK_VENDOR_ID_AMD = 4098,
  VK_VENDOR_ID_IMGTEC = 4112,
  VK_VENDOR_ID_NVIDIA = 4318,
  VK_VENDOR_ID_ARM = 5045,
  VK_VENDOR_ID_QUALCOMM = 20803,
  VK_VENDOR_ID_INTEL = 32902,
  VK_VENDOR_ID_KHRONOS = 65536,
  VK_VENDOR_ID_VIV = 65537,
  VK_VENDOR_ID_VSI = 65538,
  VK_VENDOR_ID_KAZAN = 65539,
  VK_VENDOR_ID_CODEPLAY = 65540,
  VK_VENDOR_ID_MESA = 65541,
  VK_VENDOR_ID_POCL = 65542,
  VK_VENDOR_ID_MOBILEYE = 65543,
} VkVendorId;

typedef enum {
  VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
  VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
  VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
  VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
  VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
} VkSystemAllocationScope;

typedef void* (SYS_DECL* PFN_vkAllocationFunction)(void* pUserData, usize size, usize alignment, VkSystemAllocationScope allocationScope);

typedef void (SYS_DECL* PFN_vkFreeFunction)(void* pUserData, void* pMemory);

typedef enum {
  VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
} VkInternalAllocationType;

typedef void (SYS_DECL* PFN_vkInternalAllocationNotification)(void* pUserData, usize size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope);

typedef void (SYS_DECL* PFN_vkInternalFreeNotification)(void* pUserData, usize size, VkInternalAllocationType allocationType, VkSystemAllocationScope allocationScope);

typedef void* (SYS_DECL* PFN_vkReallocationFunction)(void* pUserData, void* pOriginal, usize size, usize alignment, VkSystemAllocationScope allocationScope);

typedef void (SYS_DECL* PFN_vkVoidFunction)(void);

typedef struct VkAllocationCallbacks {
  void* pUserData;
  PFN_vkAllocationFunction pfnAllocation;
  PFN_vkReallocationFunction pfnReallocation;
  PFN_vkFreeFunction pfnFree;
  PFN_vkInternalAllocationNotification pfnInternalAllocation;
  PFN_vkInternalFreeNotification pfnInternalFree;
} VkAllocationCallbacks;

typedef struct VkApplicationInfo {
  VkStructureType sType;
  const void* pNext;
  const char* pApplicationName;
  u32 applicationVersion;
  const char* pEngineName;
  u32 engineVersion;
  u32 apiVersion;
} VkApplicationInfo;

typedef enum {
  VK_FORMAT_UNDEFINED = 0,
  VK_FORMAT_R4G4_UNORM_PACK8 = 1,
  VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
  VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
  VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
  VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
  VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
  VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
  VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
  VK_FORMAT_R8_UNORM = 9,
  VK_FORMAT_R8_SNORM = 10,
  VK_FORMAT_R8_USCALED = 11,
  VK_FORMAT_R8_SSCALED = 12,
  VK_FORMAT_R8_UINT = 13,
  VK_FORMAT_R8_SINT = 14,
  VK_FORMAT_R8_SRGB = 15,
  VK_FORMAT_R8G8_UNORM = 16,
  VK_FORMAT_R8G8_SNORM = 17,
  VK_FORMAT_R8G8_USCALED = 18,
  VK_FORMAT_R8G8_SSCALED = 19,
  VK_FORMAT_R8G8_UINT = 20,
  VK_FORMAT_R8G8_SINT = 21,
  VK_FORMAT_R8G8_SRGB = 22,
  VK_FORMAT_R8G8B8_UNORM = 23,
  VK_FORMAT_R8G8B8_SNORM = 24,
  VK_FORMAT_R8G8B8_USCALED = 25,
  VK_FORMAT_R8G8B8_SSCALED = 26,
  VK_FORMAT_R8G8B8_UINT = 27,
  VK_FORMAT_R8G8B8_SINT = 28,
  VK_FORMAT_R8G8B8_SRGB = 29,
  VK_FORMAT_B8G8R8_UNORM = 30,
  VK_FORMAT_B8G8R8_SNORM = 31,
  VK_FORMAT_B8G8R8_USCALED = 32,
  VK_FORMAT_B8G8R8_SSCALED = 33,
  VK_FORMAT_B8G8R8_UINT = 34,
  VK_FORMAT_B8G8R8_SINT = 35,
  VK_FORMAT_B8G8R8_SRGB = 36,
  VK_FORMAT_R8G8B8A8_UNORM = 37,
  VK_FORMAT_R8G8B8A8_SNORM = 38,
  VK_FORMAT_R8G8B8A8_USCALED = 39,
  VK_FORMAT_R8G8B8A8_SSCALED = 40,
  VK_FORMAT_R8G8B8A8_UINT = 41,
  VK_FORMAT_R8G8B8A8_SINT = 42,
  VK_FORMAT_R8G8B8A8_SRGB = 43,
  VK_FORMAT_B8G8R8A8_UNORM = 44,
  VK_FORMAT_B8G8R8A8_SNORM = 45,
  VK_FORMAT_B8G8R8A8_USCALED = 46,
  VK_FORMAT_B8G8R8A8_SSCALED = 47,
  VK_FORMAT_B8G8R8A8_UINT = 48,
  VK_FORMAT_B8G8R8A8_SINT = 49,
  VK_FORMAT_B8G8R8A8_SRGB = 50,
  VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
  VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
  VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
  VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
  VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
  VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
  VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
  VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
  VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
  VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
  VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
  VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
  VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
  VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
  VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
  VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
  VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
  VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
  VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
  VK_FORMAT_R16_UNORM = 70,
  VK_FORMAT_R16_SNORM = 71,
  VK_FORMAT_R16_USCALED = 72,
  VK_FORMAT_R16_SSCALED = 73,
  VK_FORMAT_R16_UINT = 74,
  VK_FORMAT_R16_SINT = 75,
  VK_FORMAT_R16_SFLOAT = 76,
  VK_FORMAT_R16G16_UNORM = 77,
  VK_FORMAT_R16G16_SNORM = 78,
  VK_FORMAT_R16G16_USCALED = 79,
  VK_FORMAT_R16G16_SSCALED = 80,
  VK_FORMAT_R16G16_UINT = 81,
  VK_FORMAT_R16G16_SINT = 82,
  VK_FORMAT_R16G16_SFLOAT = 83,
  VK_FORMAT_R16G16B16_UNORM = 84,
  VK_FORMAT_R16G16B16_SNORM = 85,
  VK_FORMAT_R16G16B16_USCALED = 86,
  VK_FORMAT_R16G16B16_SSCALED = 87,
  VK_FORMAT_R16G16B16_UINT = 88,
  VK_FORMAT_R16G16B16_SINT = 89,
  VK_FORMAT_R16G16B16_SFLOAT = 90,
  VK_FORMAT_R16G16B16A16_UNORM = 91,
  VK_FORMAT_R16G16B16A16_SNORM = 92,
  VK_FORMAT_R16G16B16A16_USCALED = 93,
  VK_FORMAT_R16G16B16A16_SSCALED = 94,
  VK_FORMAT_R16G16B16A16_UINT = 95,
  VK_FORMAT_R16G16B16A16_SINT = 96,
  VK_FORMAT_R16G16B16A16_SFLOAT = 97,
  VK_FORMAT_R32_UINT = 98,
  VK_FORMAT_R32_SINT = 99,
  VK_FORMAT_R32_SFLOAT = 100,
  VK_FORMAT_R32G32_UINT = 101,
  VK_FORMAT_R32G32_SINT = 102,
  VK_FORMAT_R32G32_SFLOAT = 103,
  VK_FORMAT_R32G32B32_UINT = 104,
  VK_FORMAT_R32G32B32_SINT = 105,
  VK_FORMAT_R32G32B32_SFLOAT = 106,
  VK_FORMAT_R32G32B32A32_UINT = 107,
  VK_FORMAT_R32G32B32A32_SINT = 108,
  VK_FORMAT_R32G32B32A32_SFLOAT = 109,
  VK_FORMAT_R64_UINT = 110,
  VK_FORMAT_R64_SINT = 111,
  VK_FORMAT_R64_SFLOAT = 112,
  VK_FORMAT_R64G64_UINT = 113,
  VK_FORMAT_R64G64_SINT = 114,
  VK_FORMAT_R64G64_SFLOAT = 115,
  VK_FORMAT_R64G64B64_UINT = 116,
  VK_FORMAT_R64G64B64_SINT = 117,
  VK_FORMAT_R64G64B64_SFLOAT = 118,
  VK_FORMAT_R64G64B64A64_UINT = 119,
  VK_FORMAT_R64G64B64A64_SINT = 120,
  VK_FORMAT_R64G64B64A64_SFLOAT = 121,
  VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
  VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
  VK_FORMAT_D16_UNORM = 124,
  VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
  VK_FORMAT_D32_SFLOAT = 126,
  VK_FORMAT_S8_UINT = 127,
  VK_FORMAT_D16_UNORM_S8_UINT = 128,
  VK_FORMAT_D24_UNORM_S8_UINT = 129,
  VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
  VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
  VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
  VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
  VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
  VK_FORMAT_BC2_UNORM_BLOCK = 135,
  VK_FORMAT_BC2_SRGB_BLOCK = 136,
  VK_FORMAT_BC3_UNORM_BLOCK = 137,
  VK_FORMAT_BC3_SRGB_BLOCK = 138,
  VK_FORMAT_BC4_UNORM_BLOCK = 139,
  VK_FORMAT_BC4_SNORM_BLOCK = 140,
  VK_FORMAT_BC5_UNORM_BLOCK = 141,
  VK_FORMAT_BC5_SNORM_BLOCK = 142,
  VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
  VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
  VK_FORMAT_BC7_UNORM_BLOCK = 145,
  VK_FORMAT_BC7_SRGB_BLOCK = 146,
  VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
  VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
  VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
  VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
  VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
  VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
  VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
  VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
  VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
  VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
  VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
  VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
  VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
  VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
  VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
  VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
  VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
  VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
  VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
  VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
  VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
  VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
  VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
  VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
  VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
  VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
  VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
  VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
  VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
  VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
  VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
  VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
  VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
  VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
  VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
  VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
  VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
  VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
  VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
  VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
  VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
  VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
  VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
  VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
  VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
  VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
  VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
  VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
  VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
  VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
  VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
  VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
  VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
  VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
  VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
  VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
  VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
  VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
  VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
  VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
  VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
  VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
  VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
  VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
  VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
  VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
} VkFormat;

typedef enum {
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1,
  VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2,
  VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4,
  VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8,
  VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16,
  VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32,
  VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64,
  VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128,
  VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256,
  VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512,
  VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024,
  VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096,
  VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384,
  VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768,
  VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576,
  VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152,
  VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304,
  VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608,
} VkFormatFeatureFlagBits;

typedef VkFlags VkFormatFeatureFlags;

typedef struct VkFormatProperties {
  VkFormatFeatureFlags linearTilingFeatures;
  VkFormatFeatureFlags optimalTilingFeatures;
  VkFormatFeatureFlags bufferFeatures;
} VkFormatProperties;

typedef enum {
  VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1,
  VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2,
  VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4,
  VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8,
  VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16,
  VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32,
  VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64,
  VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128,
  VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256,
  VK_IMAGE_CREATE_DISJOINT_BIT = 512,
  VK_IMAGE_CREATE_ALIAS_BIT = 1024,
  VK_IMAGE_CREATE_PROTECTED_BIT = 2048,
} VkImageCreateFlagBits;

typedef VkFlags VkImageCreateFlags;

typedef VkFlags VkSampleCountFlags;

typedef struct VkImageFormatProperties {
  VkExtent3D maxExtent;
  u32 maxMipLevels;
  u32 maxArrayLayers;
  VkSampleCountFlags sampleCounts;
  VkDeviceSize maxResourceSize;
} VkImageFormatProperties;

typedef enum {
  VK_IMAGE_TILING_OPTIMAL = 0,
  VK_IMAGE_TILING_LINEAR = 1,
} VkImageTiling;

typedef enum {
  VK_IMAGE_TYPE_1D = 0,
  VK_IMAGE_TYPE_2D = 1,
  VK_IMAGE_TYPE_3D = 2,
} VkImageType;

typedef enum {
  VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
  VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2,
  VK_IMAGE_USAGE_SAMPLED_BIT = 4,
  VK_IMAGE_USAGE_STORAGE_BIT = 8,
  VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
  VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
  VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
  VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
} VkImageUsageFlagBits;

typedef VkFlags VkImageUsageFlags;

typedef struct VkInstance_T* VkInstance;

typedef VkFlags VkInstanceCreateFlags;

typedef struct VkInstanceCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkInstanceCreateFlags flags;
  const VkApplicationInfo* pApplicationInfo;
  u32 enabledLayerCount;
  const char* const* ppEnabledLayerNames;
  u32 enabledExtensionCount;
  const char* const* ppEnabledExtensionNames;
} VkInstanceCreateInfo;

typedef VkFlags VkMemoryHeapFlags;

typedef struct VkMemoryHeap {
  VkDeviceSize size;
  VkMemoryHeapFlags flags;
} VkMemoryHeap;

typedef enum {
  VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1,
  VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2,
} VkMemoryHeapFlagBits;

typedef enum {
  VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1,
  VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2,
  VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4,
  VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8,
  VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16,
  VK_MEMORY_PROPERTY_PROTECTED_BIT = 32,
} VkMemoryPropertyFlagBits;

typedef VkFlags VkMemoryPropertyFlags;

typedef struct VkMemoryType {
  VkMemoryPropertyFlags propertyFlags;
  u32 heapIndex;
} VkMemoryType;

typedef struct VkPhysicalDevice_T* VkPhysicalDevice;

typedef struct VkPhysicalDeviceFeatures {
  VkBool32 robustBufferAccess;
  VkBool32 fullDrawIndexUint32;
  VkBool32 imageCubeArray;
  VkBool32 independentBlend;
  VkBool32 geometryShader;
  VkBool32 tessellationShader;
  VkBool32 sampleRateShading;
  VkBool32 dualSrcBlend;
  VkBool32 logicOp;
  VkBool32 multiDrawIndirect;
  VkBool32 drawIndirectFirstInstance;
  VkBool32 depthClamp;
  VkBool32 depthBiasClamp;
  VkBool32 fillModeNonSolid;
  VkBool32 depthBounds;
  VkBool32 wideLines;
  VkBool32 largePoints;
  VkBool32 alphaToOne;
  VkBool32 multiViewport;
  VkBool32 samplerAnisotropy;
  VkBool32 textureCompressionETC2;
  VkBool32 textureCompressionASTC_LDR;
  VkBool32 textureCompressionBC;
  VkBool32 occlusionQueryPrecise;
  VkBool32 pipelineStatisticsQuery;
  VkBool32 vertexPipelineStoresAndAtomics;
  VkBool32 fragmentStoresAndAtomics;
  VkBool32 shaderTessellationAndGeometryPointSize;
  VkBool32 shaderImageGatherExtended;
  VkBool32 shaderStorageImageExtendedFormats;
  VkBool32 shaderStorageImageMultisample;
  VkBool32 shaderStorageImageReadWithoutFormat;
  VkBool32 shaderStorageImageWriteWithoutFormat;
  VkBool32 shaderUniformBufferArrayDynamicIndexing;
  VkBool32 shaderSampledImageArrayDynamicIndexing;
  VkBool32 shaderStorageBufferArrayDynamicIndexing;
  VkBool32 shaderStorageImageArrayDynamicIndexing;
  VkBool32 shaderClipDistance;
  VkBool32 shaderCullDistance;
  VkBool32 shaderFloat64;
  VkBool32 shaderInt64;
  VkBool32 shaderInt16;
  VkBool32 shaderResourceResidency;
  VkBool32 shaderResourceMinLod;
  VkBool32 sparseBinding;
  VkBool32 sparseResidencyBuffer;
  VkBool32 sparseResidencyImage2D;
  VkBool32 sparseResidencyImage3D;
  VkBool32 sparseResidency2Samples;
  VkBool32 sparseResidency4Samples;
  VkBool32 sparseResidency8Samples;
  VkBool32 sparseResidency16Samples;
  VkBool32 sparseResidencyAliased;
  VkBool32 variableMultisampleRate;
  VkBool32 inheritedQueries;
} VkPhysicalDeviceFeatures;

typedef struct VkPhysicalDeviceLimits {
  u32 maxImageDimension1D;
  u32 maxImageDimension2D;
  u32 maxImageDimension3D;
  u32 maxImageDimensionCube;
  u32 maxImageArrayLayers;
  u32 maxTexelBufferElements;
  u32 maxUniformBufferRange;
  u32 maxStorageBufferRange;
  u32 maxPushConstantsSize;
  u32 maxMemoryAllocationCount;
  u32 maxSamplerAllocationCount;
  VkDeviceSize bufferImageGranularity;
  VkDeviceSize sparseAddressSpaceSize;
  u32 maxBoundDescriptorSets;
  u32 maxPerStageDescriptorSamplers;
  u32 maxPerStageDescriptorUniformBuffers;
  u32 maxPerStageDescriptorStorageBuffers;
  u32 maxPerStageDescriptorSampledImages;
  u32 maxPerStageDescriptorStorageImages;
  u32 maxPerStageDescriptorInputAttachments;
  u32 maxPerStageResources;
  u32 maxDescriptorSetSamplers;
  u32 maxDescriptorSetUniformBuffers;
  u32 maxDescriptorSetUniformBuffersDynamic;
  u32 maxDescriptorSetStorageBuffers;
  u32 maxDescriptorSetStorageBuffersDynamic;
  u32 maxDescriptorSetSampledImages;
  u32 maxDescriptorSetStorageImages;
  u32 maxDescriptorSetInputAttachments;
  u32 maxVertexInputAttributes;
  u32 maxVertexInputBindings;
  u32 maxVertexInputAttributeOffset;
  u32 maxVertexInputBindingStride;
  u32 maxVertexOutputComponents;
  u32 maxTessellationGenerationLevel;
  u32 maxTessellationPatchSize;
  u32 maxTessellationControlPerVertexInputComponents;
  u32 maxTessellationControlPerVertexOutputComponents;
  u32 maxTessellationControlPerPatchOutputComponents;
  u32 maxTessellationControlTotalOutputComponents;
  u32 maxTessellationEvaluationInputComponents;
  u32 maxTessellationEvaluationOutputComponents;
  u32 maxGeometryShaderInvocations;
  u32 maxGeometryInputComponents;
  u32 maxGeometryOutputComponents;
  u32 maxGeometryOutputVertices;
  u32 maxGeometryTotalOutputComponents;
  u32 maxFragmentInputComponents;
  u32 maxFragmentOutputAttachments;
  u32 maxFragmentDualSrcAttachments;
  u32 maxFragmentCombinedOutputResources;
  u32 maxComputeSharedMemorySize;
  u32 maxComputeWorkGroupCount[3];
  u32 maxComputeWorkGroupInvocations;
  u32 maxComputeWorkGroupSize[3];
  u32 subPixelPrecisionBits;
  u32 subTexelPrecisionBits;
  u32 mipmapPrecisionBits;
  u32 maxDrawIndexedIndexValue;
  u32 maxDrawIndirectCount;
  f32 maxSamplerLodBias;
  f32 maxSamplerAnisotropy;
  u32 maxViewports;
  u32 maxViewportDimensions[2];
  f32 viewportBoundsRange[2];
  u32 viewportSubPixelBits;
  usize minMemoryMapAlignment;
  VkDeviceSize minTexelBufferOffsetAlignment;
  VkDeviceSize minUniformBufferOffsetAlignment;
  VkDeviceSize minStorageBufferOffsetAlignment;
  i32 minTexelOffset;
  u32 maxTexelOffset;
  i32 minTexelGatherOffset;
  u32 maxTexelGatherOffset;
  f32 minInterpolationOffset;
  f32 maxInterpolationOffset;
  u32 subPixelInterpolationOffsetBits;
  u32 maxFramebufferWidth;
  u32 maxFramebufferHeight;
  u32 maxFramebufferLayers;
  VkSampleCountFlags framebufferColorSampleCounts;
  VkSampleCountFlags framebufferDepthSampleCounts;
  VkSampleCountFlags framebufferStencilSampleCounts;
  VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
  u32 maxColorAttachments;
  VkSampleCountFlags sampledImageColorSampleCounts;
  VkSampleCountFlags sampledImageIntegerSampleCounts;
  VkSampleCountFlags sampledImageDepthSampleCounts;
  VkSampleCountFlags sampledImageStencilSampleCounts;
  VkSampleCountFlags storageImageSampleCounts;
  u32 maxSampleMaskWords;
  VkBool32 timestampComputeAndGraphics;
  f32 timestampPeriod;
  u32 maxClipDistances;
  u32 maxCullDistances;
  u32 maxCombinedClipAndCullDistances;
  u32 discreteQueuePriorities;
  f32 pointSizeRange[2];
  f32 lineWidthRange[2];
  f32 pointSizeGranularity;
  f32 lineWidthGranularity;
  VkBool32 strictLines;
  VkBool32 standardSampleLocations;
  VkDeviceSize optimalBufferCopyOffsetAlignment;
  VkDeviceSize optimalBufferCopyRowPitchAlignment;
  VkDeviceSize nonCoherentAtomSize;
} VkPhysicalDeviceLimits;

typedef struct VkPhysicalDeviceMemoryProperties {
  u32 memoryTypeCount;
  VkMemoryType memoryTypes[VK_MAX_MEMORY_TYPES];
  u32 memoryHeapCount;
  VkMemoryHeap memoryHeaps[VK_MAX_MEMORY_HEAPS];
} VkPhysicalDeviceMemoryProperties;

typedef enum {
  VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
  VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
  VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
  VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
  VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
} VkPhysicalDeviceType;

typedef struct VkPhysicalDeviceSparseProperties {
  VkBool32 residencyStandard2DBlockShape;
  VkBool32 residencyStandard2DMultisampleBlockShape;
  VkBool32 residencyStandard3DBlockShape;
  VkBool32 residencyAlignedMipSize;
  VkBool32 residencyNonResidentStrict;
} VkPhysicalDeviceSparseProperties;

typedef struct VkPhysicalDeviceProperties {
  u32 apiVersion;
  u32 driverVersion;
  u32 vendorID;
  u32 deviceID;
  VkPhysicalDeviceType deviceType;
  char deviceName[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE];
  u8 pipelineCacheUUID[VK_UUID_SIZE];
  VkPhysicalDeviceLimits limits;
  VkPhysicalDeviceSparseProperties sparseProperties;
} VkPhysicalDeviceProperties;

typedef VkFlags VkQueueFlags;

typedef struct VkQueueFamilyProperties {
  VkQueueFlags queueFlags;
  u32 queueCount;
  u32 timestampValidBits;
  VkExtent3D minImageTransferGranularity;
} VkQueueFamilyProperties;

typedef enum {
  VK_QUEUE_GRAPHICS_BIT = 1,
  VK_QUEUE_COMPUTE_BIT = 2,
  VK_QUEUE_TRANSFER_BIT = 4,
  VK_QUEUE_SPARSE_BINDING_BIT = 8,
  VK_QUEUE_PROTECTED_BIT = 16,
} VkQueueFlagBits;

typedef enum {
  VK_SAMPLE_COUNT_1_BIT = 1,
  VK_SAMPLE_COUNT_2_BIT = 2,
  VK_SAMPLE_COUNT_4_BIT = 4,
  VK_SAMPLE_COUNT_8_BIT = 8,
  VK_SAMPLE_COUNT_16_BIT = 16,
  VK_SAMPLE_COUNT_32_BIT = 32,
  VK_SAMPLE_COUNT_64_BIT = 64,
} VkSampleCountFlagBits;

typedef struct VkDevice_T* VkDevice;

typedef VkFlags VkDeviceCreateFlags;

typedef VkFlags VkDeviceQueueCreateFlags;

typedef struct VkDeviceQueueCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkDeviceQueueCreateFlags flags;
  u32 queueFamilyIndex;
  u32 queueCount;
  const f32* pQueuePriorities;
} VkDeviceQueueCreateInfo;

typedef struct VkDeviceCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkDeviceCreateFlags flags;
  u32 queueCreateInfoCount;
  const VkDeviceQueueCreateInfo* pQueueCreateInfos;
  u32 enabledLayerCount;
  const char* const* ppEnabledLayerNames;
  u32 enabledExtensionCount;
  const char* const* ppEnabledExtensionNames;
  const VkPhysicalDeviceFeatures* pEnabledFeatures;
} VkDeviceCreateInfo;

typedef struct VkExtensionProperties {
  char extensionName[VK_MAX_EXTENSION_NAME_SIZE];
  u32 specVersion;
} VkExtensionProperties;

typedef struct VkLayerProperties {
  char layerName[VK_MAX_EXTENSION_NAME_SIZE];
  u32 specVersion;
  u32 implementationVersion;
  char description[VK_MAX_DESCRIPTION_SIZE];
} VkLayerProperties;

typedef enum {
  VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1,
  VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2,
  VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4,
  VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8,
  VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16,
  VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32,
  VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64,
  VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128,
  VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256,
  VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512,
  VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024,
  VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048,
  VK_PIPELINE_STAGE_TRANSFER_BIT = 4096,
  VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192,
  VK_PIPELINE_STAGE_HOST_BIT = 16384,
  VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768,
  VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536,
} VkPipelineStageFlagBits;

typedef VkFlags VkPipelineStageFlags;

typedef struct VkQueue_T* VkQueue;

typedef struct VkSemaphore_T* VkSemaphore;

typedef struct VkCommandBuffer_T* VkCommandBuffer;

typedef struct VkSubmitInfo {
  VkStructureType sType;
  const void* pNext;
  u32 waitSemaphoreCount;
  const VkSemaphore* pWaitSemaphores;
  const VkPipelineStageFlags* pWaitDstStageMask;
  u32 commandBufferCount;
  const VkCommandBuffer* pCommandBuffers;
  u32 signalSemaphoreCount;
  const VkSemaphore* pSignalSemaphores;
} VkSubmitInfo;

typedef struct VkFence_T* VkFence;

typedef struct VkDeviceMemory_T* VkDeviceMemory;

typedef struct VkMappedMemoryRange {
  VkStructureType sType;
  const void* pNext;
  VkDeviceMemory memory;
  VkDeviceSize offset;
  VkDeviceSize size;
} VkMappedMemoryRange;

typedef struct VkMemoryAllocateInfo {
  VkStructureType sType;
  const void* pNext;
  VkDeviceSize allocationSize;
  u32 memoryTypeIndex;
} VkMemoryAllocateInfo;

typedef VkFlags VkMemoryMapFlags;

typedef struct VkMemoryRequirements {
  VkDeviceSize size;
  VkDeviceSize alignment;
  u32 memoryTypeBits;
} VkMemoryRequirements;

typedef VkFlags VkSparseMemoryBindFlags;

typedef struct VkSparseMemoryBind {
  VkDeviceSize resourceOffset;
  VkDeviceSize size;
  VkDeviceMemory memory;
  VkDeviceSize memoryOffset;
  VkSparseMemoryBindFlags flags;
} VkSparseMemoryBind;

typedef struct VkSparseBufferMemoryBindInfo {
  VkBuffer buffer;
  u32 bindCount;
  const VkSparseMemoryBind* pBinds;
} VkSparseBufferMemoryBindInfo;

typedef struct VkSparseImageOpaqueMemoryBindInfo {
  VkImage image;
  u32 bindCount;
  const VkSparseMemoryBind* pBinds;
} VkSparseImageOpaqueMemoryBindInfo;

typedef struct VkImageSubresource {
  VkImageAspectFlags aspectMask;
  u32 mipLevel;
  u32 arrayLayer;
} VkImageSubresource;

typedef struct VkSparseImageMemoryBind {
  VkImageSubresource subresource;
  VkOffset3D offset;
  VkExtent3D extent;
  VkDeviceMemory memory;
  VkDeviceSize memoryOffset;
  VkSparseMemoryBindFlags flags;
} VkSparseImageMemoryBind;

typedef struct VkSparseImageMemoryBindInfo {
  VkImage image;
  u32 bindCount;
  const VkSparseImageMemoryBind* pBinds;
} VkSparseImageMemoryBindInfo;

typedef struct VkBindSparseInfo {
  VkStructureType sType;
  const void* pNext;
  u32 waitSemaphoreCount;
  const VkSemaphore* pWaitSemaphores;
  u32 bufferBindCount;
  const VkSparseBufferMemoryBindInfo* pBufferBinds;
  u32 imageOpaqueBindCount;
  const VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
  u32 imageBindCount;
  const VkSparseImageMemoryBindInfo* pImageBinds;
  u32 signalSemaphoreCount;
  const VkSemaphore* pSignalSemaphores;
} VkBindSparseInfo;

typedef enum {
  VK_IMAGE_ASPECT_NONE = 0,
  VK_IMAGE_ASPECT_COLOR_BIT = 1,
  VK_IMAGE_ASPECT_DEPTH_BIT = 2,
  VK_IMAGE_ASPECT_STENCIL_BIT = 4,
  VK_IMAGE_ASPECT_METADATA_BIT = 8,
  VK_IMAGE_ASPECT_PLANE_0_BIT = 16,
  VK_IMAGE_ASPECT_PLANE_1_BIT = 32,
  VK_IMAGE_ASPECT_PLANE_2_BIT = 64,
} VkImageAspectFlagBits;

typedef enum {
  VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1,
  VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2,
  VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4,
} VkSparseImageFormatFlagBits;

typedef VkFlags VkSparseImageFormatFlags;

typedef struct VkSparseImageFormatProperties {
  VkImageAspectFlags aspectMask;
  VkExtent3D imageGranularity;
  VkSparseImageFormatFlags flags;
} VkSparseImageFormatProperties;

typedef struct VkSparseImageMemoryRequirements {
  VkSparseImageFormatProperties formatProperties;
  u32 imageMipTailFirstLod;
  VkDeviceSize imageMipTailSize;
  VkDeviceSize imageMipTailOffset;
  VkDeviceSize imageMipTailStride;
} VkSparseImageMemoryRequirements;

typedef enum {
  VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1,
} VkSparseMemoryBindFlagBits;

typedef enum {
  VK_FENCE_CREATE_SIGNALED_BIT = 1,
} VkFenceCreateFlagBits;

typedef VkFlags VkFenceCreateFlags;

typedef struct VkFenceCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkFenceCreateFlags flags;
} VkFenceCreateInfo;

typedef VkFlags VkSemaphoreCreateFlags;

typedef struct VkSemaphoreCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkSemaphoreCreateFlags flags;
} VkSemaphoreCreateInfo;

typedef struct VkEvent_T* VkEvent;

typedef VkFlags VkEventCreateFlags;

typedef struct VkEventCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkEventCreateFlags flags;
} VkEventCreateInfo;

typedef enum {
  VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1,
  VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2,
  VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4,
  VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8,
  VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16,
  VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32,
  VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64,
  VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128,
  VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256,
  VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512,
  VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024,
} VkQueryPipelineStatisticFlagBits;

typedef VkFlags VkQueryPipelineStatisticFlags;

typedef struct VkQueryPool_T* VkQueryPool;

typedef VkFlags VkQueryPoolCreateFlags;

typedef enum {
  VK_QUERY_TYPE_OCCLUSION = 0,
  VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
  VK_QUERY_TYPE_TIMESTAMP = 2,
} VkQueryType;

typedef struct VkQueryPoolCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkQueryPoolCreateFlags flags;
  VkQueryType queryType;
  u32 queryCount;
  VkQueryPipelineStatisticFlags pipelineStatistics;
} VkQueryPoolCreateInfo;

typedef enum {
  VK_QUERY_RESULT_64_BIT = 1,
  VK_QUERY_RESULT_WAIT_BIT = 2,
  VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4,
  VK_QUERY_RESULT_PARTIAL_BIT = 8,
} VkQueryResultFlagBits;

typedef VkFlags VkQueryResultFlags;

typedef enum {
  VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1,
  VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2,
  VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4,
  VK_BUFFER_CREATE_PROTECTED_BIT = 8,
} VkBufferCreateFlagBits;

typedef VkFlags VkBufferCreateFlags;

typedef VkFlags VkBufferUsageFlags;

typedef enum {
  VK_SHARING_MODE_EXCLUSIVE = 0,
  VK_SHARING_MODE_CONCURRENT = 1,
} VkSharingMode;

typedef struct VkBufferCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkBufferCreateFlags flags;
  VkDeviceSize size;
  VkBufferUsageFlags usage;
  VkSharingMode sharingMode;
  u32 queueFamilyIndexCount;
  const u32* pQueueFamilyIndices;
} VkBufferCreateInfo;

typedef enum {
  VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1,
  VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2,
  VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4,
  VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8,
  VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16,
  VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32,
  VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64,
  VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128,
  VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256,
} VkBufferUsageFlagBits;

typedef struct VkBufferView_T* VkBufferView;

typedef VkFlags VkBufferViewCreateFlags;

typedef struct VkBufferViewCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkBufferViewCreateFlags flags;
  VkBuffer buffer;
  VkFormat format;
  VkDeviceSize offset;
  VkDeviceSize range;
} VkBufferViewCreateInfo;

typedef struct VkImageCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkImageCreateFlags flags;
  VkImageType imageType;
  VkFormat format;
  VkExtent3D extent;
  u32 mipLevels;
  u32 arrayLayers;
  VkSampleCountFlagBits samples;
  VkImageTiling tiling;
  VkImageUsageFlags usage;
  VkSharingMode sharingMode;
  u32 queueFamilyIndexCount;
  const u32* pQueueFamilyIndices;
  VkImageLayout initialLayout;
} VkImageCreateInfo;

typedef struct VkSubresourceLayout {
  VkDeviceSize offset;
  VkDeviceSize size;
  VkDeviceSize rowPitch;
  VkDeviceSize arrayPitch;
  VkDeviceSize depthPitch;
} VkSubresourceLayout;

typedef enum {
  VK_COMPONENT_SWIZZLE_IDENTITY = 0,
  VK_COMPONENT_SWIZZLE_ZERO = 1,
  VK_COMPONENT_SWIZZLE_ONE = 2,
  VK_COMPONENT_SWIZZLE_R = 3,
  VK_COMPONENT_SWIZZLE_G = 4,
  VK_COMPONENT_SWIZZLE_B = 5,
  VK_COMPONENT_SWIZZLE_A = 6,
} VkComponentSwizzle;

typedef struct VkComponentMapping {
  VkComponentSwizzle r;
  VkComponentSwizzle g;
  VkComponentSwizzle b;
  VkComponentSwizzle a;
} VkComponentMapping;

typedef struct VkImageView_T* VkImageView;

typedef VkFlags VkImageViewCreateFlags;

typedef enum {
  VK_IMAGE_VIEW_TYPE_1D = 0,
  VK_IMAGE_VIEW_TYPE_2D = 1,
  VK_IMAGE_VIEW_TYPE_3D = 2,
  VK_IMAGE_VIEW_TYPE_CUBE = 3,
  VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
  VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
  VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
} VkImageViewType;

typedef struct VkImageViewCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkImageViewCreateFlags flags;
  VkImage image;
  VkImageViewType viewType;
  VkFormat format;
  VkComponentMapping components;
  VkImageSubresourceRange subresourceRange;
} VkImageViewCreateInfo;

typedef struct VkShaderModule_T* VkShaderModule;

typedef VkFlags VkShaderModuleCreateFlags;

typedef struct VkShaderModuleCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkShaderModuleCreateFlags flags;
  usize codeSize;
  const u32* pCode;
} VkShaderModuleCreateInfo;

typedef struct VkPipelineCache_T* VkPipelineCache;

typedef VkFlags VkPipelineCacheCreateFlags;

typedef struct VkPipelineCacheCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineCacheCreateFlags flags;
  usize initialDataSize;
  const void* pInitialData;
} VkPipelineCacheCreateInfo;

typedef enum {
  VK_BLEND_FACTOR_ZERO = 0,
  VK_BLEND_FACTOR_ONE = 1,
  VK_BLEND_FACTOR_SRC_COLOR = 2,
  VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
  VK_BLEND_FACTOR_DST_COLOR = 4,
  VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
  VK_BLEND_FACTOR_SRC_ALPHA = 6,
  VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
  VK_BLEND_FACTOR_DST_ALPHA = 8,
  VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
  VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
  VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
  VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
  VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
  VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
  VK_BLEND_FACTOR_SRC1_COLOR = 15,
  VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
  VK_BLEND_FACTOR_SRC1_ALPHA = 17,
  VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
} VkBlendFactor;

typedef enum {
  VK_BLEND_OP_ADD = 0,
  VK_BLEND_OP_SUBTRACT = 1,
  VK_BLEND_OP_REVERSE_SUBTRACT = 2,
  VK_BLEND_OP_MIN = 3,
  VK_BLEND_OP_MAX = 4,
} VkBlendOp;

typedef enum {
  VK_COLOR_COMPONENT_R_BIT = 1,
  VK_COLOR_COMPONENT_G_BIT = 2,
  VK_COLOR_COMPONENT_B_BIT = 4,
  VK_COLOR_COMPONENT_A_BIT = 8,
} VkColorComponentFlagBits;

typedef VkFlags VkColorComponentFlags;

typedef enum {
  VK_COMPARE_OP_NEVER = 0,
  VK_COMPARE_OP_LESS = 1,
  VK_COMPARE_OP_EQUAL = 2,
  VK_COMPARE_OP_LESS_OR_EQUAL = 3,
  VK_COMPARE_OP_GREATER = 4,
  VK_COMPARE_OP_NOT_EQUAL = 5,
  VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
  VK_COMPARE_OP_ALWAYS = 7,
} VkCompareOp;

typedef VkFlags VkPipelineCreateFlags;

typedef VkFlags VkPipelineShaderStageCreateFlags;

typedef enum {
  VK_SHADER_STAGE_VERTEX_BIT = 1,
  VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
  VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
  VK_SHADER_STAGE_GEOMETRY_BIT = 8,
  VK_SHADER_STAGE_FRAGMENT_BIT = 16,
  VK_SHADER_STAGE_ALL_GRAPHICS = 31,
  VK_SHADER_STAGE_COMPUTE_BIT = 32,
  VK_SHADER_STAGE_ALL = 2147483647,
} VkShaderStageFlagBits;

typedef struct VkSpecializationMapEntry {
  u32 constantID;
  u32 offset;
  usize size;
} VkSpecializationMapEntry;

typedef struct VkSpecializationInfo {
  u32 mapEntryCount;
  const VkSpecializationMapEntry* pMapEntries;
  usize dataSize;
  const void* pData;
} VkSpecializationInfo;

typedef struct VkPipelineShaderStageCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineShaderStageCreateFlags flags;
  VkShaderStageFlagBits stage;
  VkShaderModule module;
  const char* pName;
  const VkSpecializationInfo* pSpecializationInfo;
} VkPipelineShaderStageCreateInfo;

typedef struct VkPipelineLayout_T* VkPipelineLayout;

typedef struct VkPipeline_T* VkPipeline;

typedef struct VkComputePipelineCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineCreateFlags flags;
  VkPipelineShaderStageCreateInfo stage;
  VkPipelineLayout layout;
  VkPipeline basePipelineHandle;
  i32 basePipelineIndex;
} VkComputePipelineCreateInfo;

typedef enum {
  VK_CULL_MODE_NONE = 0,
  VK_CULL_MODE_FRONT_BIT = 1,
  VK_CULL_MODE_BACK_BIT = 2,
  VK_CULL_MODE_FRONT_AND_BACK = 3,
} VkCullModeFlagBits;

typedef VkFlags VkCullModeFlags;

typedef enum {
  VK_DYNAMIC_STATE_VIEWPORT = 0,
  VK_DYNAMIC_STATE_SCISSOR = 1,
  VK_DYNAMIC_STATE_LINE_WIDTH = 2,
  VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
  VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
  VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
  VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
  VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
  VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
} VkDynamicState;

typedef enum {
  VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
  VK_FRONT_FACE_CLOCKWISE = 1,
} VkFrontFace;

typedef VkFlags VkPipelineVertexInputStateCreateFlags;

typedef enum {
  VK_VERTEX_INPUT_RATE_VERTEX = 0,
  VK_VERTEX_INPUT_RATE_INSTANCE = 1,
} VkVertexInputRate;

typedef struct VkVertexInputBindingDescription {
  u32 binding;
  u32 stride;
  VkVertexInputRate inputRate;
} VkVertexInputBindingDescription;

typedef struct VkVertexInputAttributeDescription {
  u32 location;
  u32 binding;
  VkFormat format;
  u32 offset;
} VkVertexInputAttributeDescription;

typedef struct VkPipelineVertexInputStateCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineVertexInputStateCreateFlags flags;
  u32 vertexBindingDescriptionCount;
  const VkVertexInputBindingDescription* pVertexBindingDescriptions;
  u32 vertexAttributeDescriptionCount;
  const VkVertexInputAttributeDescription* pVertexAttributeDescriptions;
} VkPipelineVertexInputStateCreateInfo;

typedef VkFlags VkPipelineInputAssemblyStateCreateFlags;

typedef enum {
  VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
  VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
  VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
  VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
  VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
  VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
  VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
} VkPrimitiveTopology;

typedef struct VkPipelineInputAssemblyStateCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineInputAssemblyStateCreateFlags flags;
  VkPrimitiveTopology topology;
  VkBool32 primitiveRestartEnable;
} VkPipelineInputAssemblyStateCreateInfo;

typedef VkFlags VkPipelineTessellationStateCreateFlags;

typedef struct VkPipelineTessellationStateCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineTessellationStateCreateFlags flags;
  u32 patchControlPoints;
} VkPipelineTessellationStateCreateInfo;

typedef VkFlags VkPipelineViewportStateCreateFlags;

typedef struct VkViewport {
  f32 x;
  f32 y;
  f32 width;
  f32 height;
  f32 minDepth;
  f32 maxDepth;
} VkViewport;

typedef struct VkPipelineViewportStateCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineViewportStateCreateFlags flags;
  u32 viewportCount;
  const VkViewport* pViewports;
  u32 scissorCount;
  const VkRect2D* pScissors;
} VkPipelineViewportStateCreateInfo;

typedef VkFlags VkPipelineRasterizationStateCreateFlags;

typedef enum {
  VK_POLYGON_MODE_FILL = 0,
  VK_POLYGON_MODE_LINE = 1,
  VK_POLYGON_MODE_POINT = 2,
} VkPolygonMode;

typedef struct VkPipelineRasterizationStateCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineRasterizationStateCreateFlags flags;
  VkBool32 depthClampEnable;
  VkBool32 rasterizerDiscardEnable;
  VkPolygonMode polygonMode;
  VkCullModeFlags cullMode;
  VkFrontFace frontFace;
  VkBool32 depthBiasEnable;
  f32 depthBiasConstantFactor;
  f32 depthBiasClamp;
  f32 depthBiasSlopeFactor;
  f32 lineWidth;
} VkPipelineRasterizationStateCreateInfo;

typedef VkFlags VkPipelineMultisampleStateCreateFlags;

typedef u32 VkSampleMask;

typedef struct VkPipelineMultisampleStateCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineMultisampleStateCreateFlags flags;
  VkSampleCountFlagBits rasterizationSamples;
  VkBool32 sampleShadingEnable;
  f32 minSampleShading;
  const VkSampleMask* pSampleMask;
  VkBool32 alphaToCoverageEnable;
  VkBool32 alphaToOneEnable;
} VkPipelineMultisampleStateCreateInfo;

typedef VkFlags VkPipelineDepthStencilStateCreateFlags;

typedef enum {
  VK_STENCIL_OP_KEEP = 0,
  VK_STENCIL_OP_ZERO = 1,
  VK_STENCIL_OP_REPLACE = 2,
  VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
  VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
  VK_STENCIL_OP_INVERT = 5,
  VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
  VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
} VkStencilOp;

typedef struct VkStencilOpState {
  VkStencilOp failOp;
  VkStencilOp passOp;
  VkStencilOp depthFailOp;
  VkCompareOp compareOp;
  u32 compareMask;
  u32 writeMask;
  u32 reference;
} VkStencilOpState;

typedef struct VkPipelineDepthStencilStateCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineDepthStencilStateCreateFlags flags;
  VkBool32 depthTestEnable;
  VkBool32 depthWriteEnable;
  VkCompareOp depthCompareOp;
  VkBool32 depthBoundsTestEnable;
  VkBool32 stencilTestEnable;
  VkStencilOpState front;
  VkStencilOpState back;
  f32 minDepthBounds;
  f32 maxDepthBounds;
} VkPipelineDepthStencilStateCreateInfo;

typedef VkFlags VkPipelineColorBlendStateCreateFlags;

typedef enum {
  VK_LOGIC_OP_CLEAR = 0,
  VK_LOGIC_OP_AND = 1,
  VK_LOGIC_OP_AND_REVERSE = 2,
  VK_LOGIC_OP_COPY = 3,
  VK_LOGIC_OP_AND_INVERTED = 4,
  VK_LOGIC_OP_NO_OP = 5,
  VK_LOGIC_OP_XOR = 6,
  VK_LOGIC_OP_OR = 7,
  VK_LOGIC_OP_NOR = 8,
  VK_LOGIC_OP_EQUIVALENT = 9,
  VK_LOGIC_OP_INVERT = 10,
  VK_LOGIC_OP_OR_REVERSE = 11,
  VK_LOGIC_OP_COPY_INVERTED = 12,
  VK_LOGIC_OP_OR_INVERTED = 13,
  VK_LOGIC_OP_NAND = 14,
  VK_LOGIC_OP_SET = 15,
} VkLogicOp;

typedef struct VkPipelineColorBlendAttachmentState {
  VkBool32 blendEnable;
  VkBlendFactor srcColorBlendFactor;
  VkBlendFactor dstColorBlendFactor;
  VkBlendOp colorBlendOp;
  VkBlendFactor srcAlphaBlendFactor;
  VkBlendFactor dstAlphaBlendFactor;
  VkBlendOp alphaBlendOp;
  VkColorComponentFlags colorWriteMask;
} VkPipelineColorBlendAttachmentState;

typedef struct VkPipelineColorBlendStateCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineColorBlendStateCreateFlags flags;
  VkBool32 logicOpEnable;
  VkLogicOp logicOp;
  u32 attachmentCount;
  const VkPipelineColorBlendAttachmentState* pAttachments;
  f32 blendConstants[4];
} VkPipelineColorBlendStateCreateInfo;

typedef VkFlags VkPipelineDynamicStateCreateFlags;

typedef struct VkPipelineDynamicStateCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineDynamicStateCreateFlags flags;
  u32 dynamicStateCount;
  const VkDynamicState* pDynamicStates;
} VkPipelineDynamicStateCreateInfo;

typedef struct VkRenderPass_T* VkRenderPass;

typedef struct VkGraphicsPipelineCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineCreateFlags flags;
  u32 stageCount;
  const VkPipelineShaderStageCreateInfo* pStages;
  const VkPipelineVertexInputStateCreateInfo* pVertexInputState;
  const VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
  const VkPipelineTessellationStateCreateInfo* pTessellationState;
  const VkPipelineViewportStateCreateInfo* pViewportState;
  const VkPipelineRasterizationStateCreateInfo* pRasterizationState;
  const VkPipelineMultisampleStateCreateInfo* pMultisampleState;
  const VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
  const VkPipelineColorBlendStateCreateInfo* pColorBlendState;
  const VkPipelineDynamicStateCreateInfo* pDynamicState;
  VkPipelineLayout layout;
  VkRenderPass renderPass;
  u32 subpass;
  VkPipeline basePipelineHandle;
  i32 basePipelineIndex;
} VkGraphicsPipelineCreateInfo;

typedef enum {
  VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1,
  VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2,
  VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4,
  VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8,
  VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16,
  VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64,
  VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128,
} VkPipelineCreateFlagBits;

typedef VkFlags VkPipelineLayoutCreateFlags;

typedef VkFlags VkShaderStageFlags;

typedef struct VkDescriptorSetLayout_T* VkDescriptorSetLayout;

typedef struct VkPushConstantRange {
  VkShaderStageFlags stageFlags;
  u32 offset;
  u32 size;
} VkPushConstantRange;

typedef struct VkPipelineLayoutCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkPipelineLayoutCreateFlags flags;
  u32 setLayoutCount;
  const VkDescriptorSetLayout* pSetLayouts;
  u32 pushConstantRangeCount;
  const VkPushConstantRange* pPushConstantRanges;
} VkPipelineLayoutCreateInfo;

typedef enum {
  VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
  VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
  VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
  VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
  VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
  VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
} VkBorderColor;

typedef enum {
  VK_FILTER_NEAREST = 0,
  VK_FILTER_LINEAR = 1,
} VkFilter;

typedef struct VkSampler_T* VkSampler;

typedef enum {
  VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
  VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
  VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
  VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
} VkSamplerAddressMode;

typedef VkFlags VkSamplerCreateFlags;

typedef enum {
  VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
  VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
} VkSamplerMipmapMode;

typedef struct VkSamplerCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkSamplerCreateFlags flags;
  VkFilter magFilter;
  VkFilter minFilter;
  VkSamplerMipmapMode mipmapMode;
  VkSamplerAddressMode addressModeU;
  VkSamplerAddressMode addressModeV;
  VkSamplerAddressMode addressModeW;
  f32 mipLodBias;
  VkBool32 anisotropyEnable;
  f32 maxAnisotropy;
  VkBool32 compareEnable;
  VkCompareOp compareOp;
  f32 minLod;
  f32 maxLod;
  VkBorderColor borderColor;
  VkBool32 unnormalizedCoordinates;
} VkSamplerCreateInfo;

typedef struct VkDescriptorSet_T* VkDescriptorSet;

typedef struct VkCopyDescriptorSet {
  VkStructureType sType;
  const void* pNext;
  VkDescriptorSet srcSet;
  u32 srcBinding;
  u32 srcArrayElement;
  VkDescriptorSet dstSet;
  u32 dstBinding;
  u32 dstArrayElement;
  u32 descriptorCount;
} VkCopyDescriptorSet;

typedef struct VkDescriptorBufferInfo {
  VkBuffer buffer;
  VkDeviceSize offset;
  VkDeviceSize range;
} VkDescriptorBufferInfo;

typedef struct VkDescriptorImageInfo {
  VkSampler sampler;
  VkImageView imageView;
  VkImageLayout imageLayout;
} VkDescriptorImageInfo;

typedef struct VkDescriptorPool_T* VkDescriptorPool;

typedef enum {
  VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1,
} VkDescriptorPoolCreateFlagBits;

typedef VkFlags VkDescriptorPoolCreateFlags;

typedef enum {
  VK_DESCRIPTOR_TYPE_SAMPLER = 0,
  VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
  VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
  VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
  VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
  VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
  VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
  VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
  VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
  VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
  VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
} VkDescriptorType;

typedef struct VkDescriptorPoolSize {
  VkDescriptorType type;
  u32 descriptorCount;
} VkDescriptorPoolSize;

typedef struct VkDescriptorPoolCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkDescriptorPoolCreateFlags flags;
  u32 maxSets;
  u32 poolSizeCount;
  const VkDescriptorPoolSize* pPoolSizes;
} VkDescriptorPoolCreateInfo;

typedef VkFlags VkDescriptorPoolResetFlags;

typedef struct VkDescriptorSetAllocateInfo {
  VkStructureType sType;
  const void* pNext;
  VkDescriptorPool descriptorPool;
  u32 descriptorSetCount;
  const VkDescriptorSetLayout* pSetLayouts;
} VkDescriptorSetAllocateInfo;

typedef struct VkDescriptorSetLayoutBinding {
  u32 binding;
  VkDescriptorType descriptorType;
  u32 descriptorCount;
  VkShaderStageFlags stageFlags;
  const VkSampler* pImmutableSamplers;
} VkDescriptorSetLayoutBinding;

typedef VkFlags VkDescriptorSetLayoutCreateFlags;

typedef struct VkDescriptorSetLayoutCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkDescriptorSetLayoutCreateFlags flags;
  u32 bindingCount;
  const VkDescriptorSetLayoutBinding* pBindings;
} VkDescriptorSetLayoutCreateInfo;

typedef struct VkWriteDescriptorSet {
  VkStructureType sType;
  const void* pNext;
  VkDescriptorSet dstSet;
  u32 dstBinding;
  u32 dstArrayElement;
  u32 descriptorCount;
  VkDescriptorType descriptorType;
  const VkDescriptorImageInfo* pImageInfo;
  const VkDescriptorBufferInfo* pBufferInfo;
  const VkBufferView* pTexelBufferView;
} VkWriteDescriptorSet;

typedef enum {
  VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1,
  VK_ACCESS_INDEX_READ_BIT = 2,
  VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4,
  VK_ACCESS_UNIFORM_READ_BIT = 8,
  VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16,
  VK_ACCESS_SHADER_READ_BIT = 32,
  VK_ACCESS_SHADER_WRITE_BIT = 64,
  VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128,
  VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256,
  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512,
  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024,
  VK_ACCESS_TRANSFER_READ_BIT = 2048,
  VK_ACCESS_TRANSFER_WRITE_BIT = 4096,
  VK_ACCESS_HOST_READ_BIT = 8192,
  VK_ACCESS_HOST_WRITE_BIT = 16384,
  VK_ACCESS_MEMORY_READ_BIT = 32768,
  VK_ACCESS_MEMORY_WRITE_BIT = 65536,
} VkAccessFlagBits;

typedef VkFlags VkAttachmentDescriptionFlags;

typedef enum {
  VK_ATTACHMENT_LOAD_OP_LOAD = 0,
  VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
  VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
} VkAttachmentLoadOp;

typedef enum {
  VK_ATTACHMENT_STORE_OP_STORE = 0,
  VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
} VkAttachmentStoreOp;

typedef struct VkAttachmentDescription {
  VkAttachmentDescriptionFlags flags;
  VkFormat format;
  VkSampleCountFlagBits samples;
  VkAttachmentLoadOp loadOp;
  VkAttachmentStoreOp storeOp;
  VkAttachmentLoadOp stencilLoadOp;
  VkAttachmentStoreOp stencilStoreOp;
  VkImageLayout initialLayout;
  VkImageLayout finalLayout;
} VkAttachmentDescription;

typedef enum {
  VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1,
} VkAttachmentDescriptionFlagBits;

typedef struct VkAttachmentReference {
  u32 attachment;
  VkImageLayout layout;
} VkAttachmentReference;

typedef enum {
  VK_DEPENDENCY_BY_REGION_BIT = 1,
  VK_DEPENDENCY_VIEW_LOCAL_BIT = 2,
  VK_DEPENDENCY_DEVICE_GROUP_BIT = 4,
} VkDependencyFlagBits;

typedef VkFlags VkDependencyFlags;

typedef struct VkFramebuffer_T* VkFramebuffer;

typedef VkFlags VkFramebufferCreateFlags;

typedef struct VkFramebufferCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkFramebufferCreateFlags flags;
  VkRenderPass renderPass;
  u32 attachmentCount;
  const VkImageView* pAttachments;
  u32 width;
  u32 height;
  u32 layers;
} VkFramebufferCreateInfo;

typedef enum {
  VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
  VK_PIPELINE_BIND_POINT_COMPUTE = 1,
} VkPipelineBindPoint;

typedef VkFlags VkRenderPassCreateFlags;

typedef VkFlags VkSubpassDescriptionFlags;

typedef struct VkSubpassDescription {
  VkSubpassDescriptionFlags flags;
  VkPipelineBindPoint pipelineBindPoint;
  u32 inputAttachmentCount;
  const VkAttachmentReference* pInputAttachments;
  u32 colorAttachmentCount;
  const VkAttachmentReference* pColorAttachments;
  const VkAttachmentReference* pResolveAttachments;
  const VkAttachmentReference* pDepthStencilAttachment;
  u32 preserveAttachmentCount;
  const u32* pPreserveAttachments;
} VkSubpassDescription;

typedef struct VkSubpassDependency {
  u32 srcSubpass;
  u32 dstSubpass;
  VkPipelineStageFlags srcStageMask;
  VkPipelineStageFlags dstStageMask;
  VkAccessFlags srcAccessMask;
  VkAccessFlags dstAccessMask;
  VkDependencyFlags dependencyFlags;
} VkSubpassDependency;

typedef struct VkRenderPassCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkRenderPassCreateFlags flags;
  u32 attachmentCount;
  const VkAttachmentDescription* pAttachments;
  u32 subpassCount;
  const VkSubpassDescription* pSubpasses;
  u32 dependencyCount;
  const VkSubpassDependency* pDependencies;
} VkRenderPassCreateInfo;

typedef struct VkCommandPool_T* VkCommandPool;

typedef enum {
  VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1,
  VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2,
  VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4,
} VkCommandPoolCreateFlagBits;

typedef VkFlags VkCommandPoolCreateFlags;

typedef struct VkCommandPoolCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkCommandPoolCreateFlags flags;
  u32 queueFamilyIndex;
} VkCommandPoolCreateInfo;

typedef enum {
  VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1,
} VkCommandPoolResetFlagBits;

typedef VkFlags VkCommandPoolResetFlags;

typedef enum {
  VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
  VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
} VkCommandBufferLevel;

typedef struct VkCommandBufferAllocateInfo {
  VkStructureType sType;
  const void* pNext;
  VkCommandPool commandPool;
  VkCommandBufferLevel level;
  u32 commandBufferCount;
} VkCommandBufferAllocateInfo;

typedef VkFlags VkCommandBufferUsageFlags;

typedef VkFlags VkQueryControlFlags;

typedef struct VkCommandBufferInheritanceInfo {
  VkStructureType sType;
  const void* pNext;
  VkRenderPass renderPass;
  u32 subpass;
  VkFramebuffer framebuffer;
  VkBool32 occlusionQueryEnable;
  VkQueryControlFlags queryFlags;
  VkQueryPipelineStatisticFlags pipelineStatistics;
} VkCommandBufferInheritanceInfo;

typedef struct VkCommandBufferBeginInfo {
  VkStructureType sType;
  const void* pNext;
  VkCommandBufferUsageFlags flags;
  const VkCommandBufferInheritanceInfo* pInheritanceInfo;
} VkCommandBufferBeginInfo;

typedef enum {
  VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1,
} VkCommandBufferResetFlagBits;

typedef VkFlags VkCommandBufferResetFlags;

typedef enum {
  VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1,
  VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2,
  VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4,
} VkCommandBufferUsageFlagBits;

typedef enum {
  VK_QUERY_CONTROL_PRECISE_BIT = 1,
} VkQueryControlFlagBits;

typedef struct VkBufferCopy {
  VkDeviceSize srcOffset;
  VkDeviceSize dstOffset;
  VkDeviceSize size;
} VkBufferCopy;

typedef struct VkImageSubresourceLayers {
  VkImageAspectFlags aspectMask;
  u32 mipLevel;
  u32 baseArrayLayer;
  u32 layerCount;
} VkImageSubresourceLayers;

typedef struct VkBufferImageCopy {
  VkDeviceSize bufferOffset;
  u32 bufferRowLength;
  u32 bufferImageHeight;
  VkImageSubresourceLayers imageSubresource;
  VkOffset3D imageOffset;
  VkExtent3D imageExtent;
} VkBufferImageCopy;

typedef union VkClearColorValue {
  f32 float32[4];
  i32 int32[4];
  u32 uint32[4];
} VkClearColorValue;

typedef struct VkClearDepthStencilValue {
  f32 depth;
  u32 stencil;
} VkClearDepthStencilValue;

typedef union VkClearValue {
  VkClearColorValue color;
  VkClearDepthStencilValue depthStencil;
} VkClearValue;

typedef struct VkClearAttachment {
  VkImageAspectFlags aspectMask;
  u32 colorAttachment;
  VkClearValue clearValue;
} VkClearAttachment;

typedef struct VkClearRect {
  VkRect2D rect;
  u32 baseArrayLayer;
  u32 layerCount;
} VkClearRect;

typedef struct VkImageBlit {
  VkImageSubresourceLayers srcSubresource;
  VkOffset3D srcOffsets[2];
  VkImageSubresourceLayers dstSubresource;
  VkOffset3D dstOffsets[2];
} VkImageBlit;

typedef struct VkImageCopy {
  VkImageSubresourceLayers srcSubresource;
  VkOffset3D srcOffset;
  VkImageSubresourceLayers dstSubresource;
  VkOffset3D dstOffset;
  VkExtent3D extent;
} VkImageCopy;

typedef struct VkImageResolve {
  VkImageSubresourceLayers srcSubresource;
  VkOffset3D srcOffset;
  VkImageSubresourceLayers dstSubresource;
  VkOffset3D dstOffset;
  VkExtent3D extent;
} VkImageResolve;

typedef enum {
  VK_INDEX_TYPE_UINT16 = 0,
  VK_INDEX_TYPE_UINT32 = 1,
} VkIndexType;

typedef struct VkRenderPassBeginInfo {
  VkStructureType sType;
  const void* pNext;
  VkRenderPass renderPass;
  VkFramebuffer framebuffer;
  VkRect2D renderArea;
  u32 clearValueCount;
  const VkClearValue* pClearValues;
} VkRenderPassBeginInfo;

typedef enum {
  VK_STENCIL_FACE_FRONT_BIT = 1,
  VK_STENCIL_FACE_BACK_BIT = 2,
  VK_STENCIL_FACE_FRONT_AND_BACK = 3,
} VkStencilFaceFlagBits;

typedef VkFlags VkStencilFaceFlags;

typedef enum {
  VK_SUBPASS_CONTENTS_INLINE = 0,
  VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
} VkSubpassContents;

typedef VkFlags VkSubgroupFeatureFlags;

typedef struct VkPhysicalDeviceSubgroupProperties {
  VkStructureType sType;
  void* pNext;
  u32 subgroupSize;
  VkShaderStageFlags supportedStages;
  VkSubgroupFeatureFlags supportedOperations;
  VkBool32 quadOperationsInAllStages;
} VkPhysicalDeviceSubgroupProperties;

typedef enum {
  VK_SUBGROUP_FEATURE_BASIC_BIT = 1,
  VK_SUBGROUP_FEATURE_VOTE_BIT = 2,
  VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4,
  VK_SUBGROUP_FEATURE_BALLOT_BIT = 8,
  VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16,
  VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32,
  VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64,
  VK_SUBGROUP_FEATURE_QUAD_BIT = 128,
} VkSubgroupFeatureFlagBits;

typedef struct VkBindBufferMemoryInfo {
  VkStructureType sType;
  const void* pNext;
  VkBuffer buffer;
  VkDeviceMemory memory;
  VkDeviceSize memoryOffset;
} VkBindBufferMemoryInfo;

typedef struct VkBindImageMemoryInfo {
  VkStructureType sType;
  const void* pNext;
  VkImage image;
  VkDeviceMemory memory;
  VkDeviceSize memoryOffset;
} VkBindImageMemoryInfo;

typedef struct VkPhysicalDevice16BitStorageFeatures {
  VkStructureType sType;
  void* pNext;
  VkBool32 storageBuffer16BitAccess;
  VkBool32 uniformAndStorageBuffer16BitAccess;
  VkBool32 storagePushConstant16;
  VkBool32 storageInputOutput16;
} VkPhysicalDevice16BitStorageFeatures;

typedef struct VkMemoryDedicatedRequirements {
  VkStructureType sType;
  void* pNext;
  VkBool32 prefersDedicatedAllocation;
  VkBool32 requiresDedicatedAllocation;
} VkMemoryDedicatedRequirements;

typedef struct VkMemoryDedicatedAllocateInfo {
  VkStructureType sType;
  const void* pNext;
  VkImage image;
  VkBuffer buffer;
} VkMemoryDedicatedAllocateInfo;

typedef VkFlags VkPeerMemoryFeatureFlags;

typedef enum {
  VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1,
  VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2,
  VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4,
  VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8,
} VkPeerMemoryFeatureFlagBits;

typedef VkFlags VkMemoryAllocateFlags;

typedef enum {
  VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1,
} VkMemoryAllocateFlagBits;

typedef struct VkMemoryAllocateFlagsInfo {
  VkStructureType sType;
  const void* pNext;
  VkMemoryAllocateFlags flags;
  u32 deviceMask;
} VkMemoryAllocateFlagsInfo;

typedef struct VkDeviceGroupRenderPassBeginInfo {
  VkStructureType sType;
  const void* pNext;
  u32 deviceMask;
  u32 deviceRenderAreaCount;
  const VkRect2D* pDeviceRenderAreas;
} VkDeviceGroupRenderPassBeginInfo;

typedef struct VkDeviceGroupCommandBufferBeginInfo {
  VkStructureType sType;
  const void* pNext;
  u32 deviceMask;
} VkDeviceGroupCommandBufferBeginInfo;

typedef struct VkDeviceGroupSubmitInfo {
  VkStructureType sType;
  const void* pNext;
  u32 waitSemaphoreCount;
  const u32* pWaitSemaphoreDeviceIndices;
  u32 commandBufferCount;
  const u32* pCommandBufferDeviceMasks;
  u32 signalSemaphoreCount;
  const u32* pSignalSemaphoreDeviceIndices;
} VkDeviceGroupSubmitInfo;

typedef struct VkDeviceGroupBindSparseInfo {
  VkStructureType sType;
  const void* pNext;
  u32 resourceDeviceIndex;
  u32 memoryDeviceIndex;
} VkDeviceGroupBindSparseInfo;

typedef struct VkBindBufferMemoryDeviceGroupInfo {
  VkStructureType sType;
  const void* pNext;
  u32 deviceIndexCount;
  const u32* pDeviceIndices;
} VkBindBufferMemoryDeviceGroupInfo;

typedef struct VkBindImageMemoryDeviceGroupInfo {
  VkStructureType sType;
  const void* pNext;
  u32 deviceIndexCount;
  const u32* pDeviceIndices;
  u32 splitInstanceBindRegionCount;
  const VkRect2D* pSplitInstanceBindRegions;
} VkBindImageMemoryDeviceGroupInfo;

typedef struct VkPhysicalDeviceGroupProperties {
  VkStructureType sType;
  void* pNext;
  u32 physicalDeviceCount;
  VkPhysicalDevice physicalDevices[VK_MAX_DEVICE_GROUP_SIZE];
  VkBool32 subsetAllocation;
} VkPhysicalDeviceGroupProperties;

typedef struct VkDeviceGroupDeviceCreateInfo {
  VkStructureType sType;
  const void* pNext;
  u32 physicalDeviceCount;
  const VkPhysicalDevice* pPhysicalDevices;
} VkDeviceGroupDeviceCreateInfo;

typedef struct VkBufferMemoryRequirementsInfo2 {
  VkStructureType sType;
  const void* pNext;
  VkBuffer buffer;
} VkBufferMemoryRequirementsInfo2;

typedef struct VkImageMemoryRequirementsInfo2 {
  VkStructureType sType;
  const void* pNext;
  VkImage image;
} VkImageMemoryRequirementsInfo2;

typedef struct VkImageSparseMemoryRequirementsInfo2 {
  VkStructureType sType;
  const void* pNext;
  VkImage image;
} VkImageSparseMemoryRequirementsInfo2;

typedef struct VkMemoryRequirements2 {
  VkStructureType sType;
  void* pNext;
  VkMemoryRequirements memoryRequirements;
} VkMemoryRequirements2;

typedef struct VkSparseImageMemoryRequirements2 {
  VkStructureType sType;
  void* pNext;
  VkSparseImageMemoryRequirements memoryRequirements;
} VkSparseImageMemoryRequirements2;

typedef struct VkPhysicalDeviceFeatures2 {
  VkStructureType sType;
  void* pNext;
  VkPhysicalDeviceFeatures features;
} VkPhysicalDeviceFeatures2;

typedef struct VkPhysicalDeviceProperties2 {
  VkStructureType sType;
  void* pNext;
  VkPhysicalDeviceProperties properties;
} VkPhysicalDeviceProperties2;

typedef struct VkFormatProperties2 {
  VkStructureType sType;
  void* pNext;
  VkFormatProperties formatProperties;
} VkFormatProperties2;

typedef struct VkImageFormatProperties2 {
  VkStructureType sType;
  void* pNext;
  VkImageFormatProperties imageFormatProperties;
} VkImageFormatProperties2;

typedef struct VkPhysicalDeviceImageFormatInfo2 {
  VkStructureType sType;
  const void* pNext;
  VkFormat format;
  VkImageType type;
  VkImageTiling tiling;
  VkImageUsageFlags usage;
  VkImageCreateFlags flags;
} VkPhysicalDeviceImageFormatInfo2;

typedef struct VkQueueFamilyProperties2 {
  VkStructureType sType;
  void* pNext;
  VkQueueFamilyProperties queueFamilyProperties;
} VkQueueFamilyProperties2;

typedef struct VkPhysicalDeviceMemoryProperties2 {
  VkStructureType sType;
  void* pNext;
  VkPhysicalDeviceMemoryProperties memoryProperties;
} VkPhysicalDeviceMemoryProperties2;

typedef struct VkSparseImageFormatProperties2 {
  VkStructureType sType;
  void* pNext;
  VkSparseImageFormatProperties properties;
} VkSparseImageFormatProperties2;

typedef struct VkPhysicalDeviceSparseImageFormatInfo2 {
  VkStructureType sType;
  const void* pNext;
  VkFormat format;
  VkImageType type;
  VkSampleCountFlagBits samples;
  VkImageUsageFlags usage;
  VkImageTiling tiling;
} VkPhysicalDeviceSparseImageFormatInfo2;

typedef VkFlags VkCommandPoolTrimFlags;

typedef enum {
  VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
  VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
} VkPointClippingBehavior;

typedef struct VkPhysicalDevicePointClippingProperties {
  VkStructureType sType;
  void* pNext;
  VkPointClippingBehavior pointClippingBehavior;
} VkPhysicalDevicePointClippingProperties;

typedef struct VkInputAttachmentAspectReference {
  u32 subpass;
  u32 inputAttachmentIndex;
  VkImageAspectFlags aspectMask;
} VkInputAttachmentAspectReference;

typedef struct VkRenderPassInputAttachmentAspectCreateInfo {
  VkStructureType sType;
  const void* pNext;
  u32 aspectReferenceCount;
  const VkInputAttachmentAspectReference* pAspectReferences;
} VkRenderPassInputAttachmentAspectCreateInfo;

typedef struct VkImageViewUsageCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkImageUsageFlags usage;
} VkImageViewUsageCreateInfo;

typedef enum {
  VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
  VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
} VkTessellationDomainOrigin;

typedef struct VkPipelineTessellationDomainOriginStateCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkTessellationDomainOrigin domainOrigin;
} VkPipelineTessellationDomainOriginStateCreateInfo;

typedef struct VkRenderPassMultiviewCreateInfo {
  VkStructureType sType;
  const void* pNext;
  u32 subpassCount;
  const u32* pViewMasks;
  u32 dependencyCount;
  const i32* pViewOffsets;
  u32 correlationMaskCount;
  const u32* pCorrelationMasks;
} VkRenderPassMultiviewCreateInfo;

typedef struct VkPhysicalDeviceMultiviewFeatures {
  VkStructureType sType;
  void* pNext;
  VkBool32 multiview;
  VkBool32 multiviewGeometryShader;
  VkBool32 multiviewTessellationShader;
} VkPhysicalDeviceMultiviewFeatures;

typedef struct VkPhysicalDeviceMultiviewProperties {
  VkStructureType sType;
  void* pNext;
  u32 maxMultiviewViewCount;
  u32 maxMultiviewInstanceIndex;
} VkPhysicalDeviceMultiviewProperties;

typedef struct VkPhysicalDeviceVariablePointersFeatures {
  VkStructureType sType;
  void* pNext;
  VkBool32 variablePointersStorageBuffer;
  VkBool32 variablePointers;
} VkPhysicalDeviceVariablePointersFeatures;

typedef enum {
  VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1,
} VkDeviceQueueCreateFlagBits;

typedef struct VkPhysicalDeviceProtectedMemoryFeatures {
  VkStructureType sType;
  void* pNext;
  VkBool32 protectedMemory;
} VkPhysicalDeviceProtectedMemoryFeatures;

typedef struct VkPhysicalDeviceProtectedMemoryProperties {
  VkStructureType sType;
  void* pNext;
  VkBool32 protectedNoFault;
} VkPhysicalDeviceProtectedMemoryProperties;

typedef struct VkDeviceQueueInfo2 {
  VkStructureType sType;
  const void* pNext;
  VkDeviceQueueCreateFlags flags;
  u32 queueFamilyIndex;
  u32 queueIndex;
} VkDeviceQueueInfo2;

typedef struct VkProtectedSubmitInfo {
  VkStructureType sType;
  const void* pNext;
  VkBool32 protectedSubmit;
} VkProtectedSubmitInfo;

typedef enum {
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
  VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
} VkSamplerYcbcrModelConversion;

typedef enum {
  VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
  VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
} VkSamplerYcbcrRange;

typedef enum {
  VK_CHROMA_LOCATION_COSITED_EVEN = 0,
  VK_CHROMA_LOCATION_MIDPOINT = 1,
} VkChromaLocation;

typedef struct VkSamplerYcbcrConversionCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkFormat format;
  VkSamplerYcbcrModelConversion ycbcrModel;
  VkSamplerYcbcrRange ycbcrRange;
  VkComponentMapping components;
  VkChromaLocation xChromaOffset;
  VkChromaLocation yChromaOffset;
  VkFilter chromaFilter;
  VkBool32 forceExplicitReconstruction;
} VkSamplerYcbcrConversionCreateInfo;

typedef struct VkSamplerYcbcrConversion_T* VkSamplerYcbcrConversion;

typedef struct VkSamplerYcbcrConversionInfo {
  VkStructureType sType;
  const void* pNext;
  VkSamplerYcbcrConversion conversion;
} VkSamplerYcbcrConversionInfo;

typedef struct VkBindImagePlaneMemoryInfo {
  VkStructureType sType;
  const void* pNext;
  VkImageAspectFlagBits planeAspect;
} VkBindImagePlaneMemoryInfo;

typedef struct VkImagePlaneMemoryRequirementsInfo {
  VkStructureType sType;
  const void* pNext;
  VkImageAspectFlagBits planeAspect;
} VkImagePlaneMemoryRequirementsInfo;

typedef struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
  VkStructureType sType;
  void* pNext;
  VkBool32 samplerYcbcrConversion;
} VkPhysicalDeviceSamplerYcbcrConversionFeatures;

typedef struct VkSamplerYcbcrConversionImageFormatProperties {
  VkStructureType sType;
  void* pNext;
  u32 combinedImageSamplerDescriptorCount;
} VkSamplerYcbcrConversionImageFormatProperties;

typedef VkFlags VkDescriptorUpdateTemplateCreateFlags;

typedef struct VkDescriptorUpdateTemplateEntry {
  u32 dstBinding;
  u32 dstArrayElement;
  u32 descriptorCount;
  VkDescriptorType descriptorType;
  usize offset;
  usize stride;
} VkDescriptorUpdateTemplateEntry;

typedef enum {
  VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
} VkDescriptorUpdateTemplateType;

typedef struct VkDescriptorUpdateTemplateCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkDescriptorUpdateTemplateCreateFlags flags;
  u32 descriptorUpdateEntryCount;
  const VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries;
  VkDescriptorUpdateTemplateType templateType;
  VkDescriptorSetLayout descriptorSetLayout;
  VkPipelineBindPoint pipelineBindPoint;
  VkPipelineLayout pipelineLayout;
  u32 set;
} VkDescriptorUpdateTemplateCreateInfo;

typedef struct VkDescriptorUpdateTemplate_T* VkDescriptorUpdateTemplate;

typedef VkFlags VkExternalMemoryHandleTypeFlags;

typedef enum {
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32,
  VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64,
} VkExternalMemoryHandleTypeFlagBits;

typedef VkFlags VkExternalMemoryFeatureFlags;

typedef enum {
  VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1,
  VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2,
  VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4,
} VkExternalMemoryFeatureFlagBits;

typedef struct VkExternalMemoryProperties {
  VkExternalMemoryFeatureFlags externalMemoryFeatures;
  VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes;
  VkExternalMemoryHandleTypeFlags compatibleHandleTypes;
} VkExternalMemoryProperties;

typedef struct VkPhysicalDeviceExternalImageFormatInfo {
  VkStructureType sType;
  const void* pNext;
  VkExternalMemoryHandleTypeFlagBits handleType;
} VkPhysicalDeviceExternalImageFormatInfo;

typedef struct VkExternalImageFormatProperties {
  VkStructureType sType;
  void* pNext;
  VkExternalMemoryProperties externalMemoryProperties;
} VkExternalImageFormatProperties;

typedef struct VkPhysicalDeviceExternalBufferInfo {
  VkStructureType sType;
  const void* pNext;
  VkBufferCreateFlags flags;
  VkBufferUsageFlags usage;
  VkExternalMemoryHandleTypeFlagBits handleType;
} VkPhysicalDeviceExternalBufferInfo;

typedef struct VkExternalBufferProperties {
  VkStructureType sType;
  void* pNext;
  VkExternalMemoryProperties externalMemoryProperties;
} VkExternalBufferProperties;

typedef struct VkPhysicalDeviceIDProperties {
  VkStructureType sType;
  void* pNext;
  u8 deviceUUID[VK_UUID_SIZE];
  u8 driverUUID[VK_UUID_SIZE];
  u8 deviceLUID[VK_LUID_SIZE];
  u32 deviceNodeMask;
  VkBool32 deviceLUIDValid;
} VkPhysicalDeviceIDProperties;

typedef struct VkExternalMemoryImageCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkExternalMemoryHandleTypeFlags handleTypes;
} VkExternalMemoryImageCreateInfo;

typedef struct VkExternalMemoryBufferCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkExternalMemoryHandleTypeFlags handleTypes;
} VkExternalMemoryBufferCreateInfo;

typedef struct VkExportMemoryAllocateInfo {
  VkStructureType sType;
  const void* pNext;
  VkExternalMemoryHandleTypeFlags handleTypes;
} VkExportMemoryAllocateInfo;

typedef VkFlags VkExternalFenceHandleTypeFlags;

typedef enum {
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
  VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8,
} VkExternalFenceHandleTypeFlagBits;

typedef VkFlags VkExternalFenceFeatureFlags;

typedef enum {
  VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1,
  VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2,
} VkExternalFenceFeatureFlagBits;

typedef struct VkPhysicalDeviceExternalFenceInfo {
  VkStructureType sType;
  const void* pNext;
  VkExternalFenceHandleTypeFlagBits handleType;
} VkPhysicalDeviceExternalFenceInfo;

typedef struct VkExternalFenceProperties {
  VkStructureType sType;
  void* pNext;
  VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes;
  VkExternalFenceHandleTypeFlags compatibleHandleTypes;
  VkExternalFenceFeatureFlags externalFenceFeatures;
} VkExternalFenceProperties;

typedef VkFlags VkFenceImportFlags;

typedef enum {
  VK_FENCE_IMPORT_TEMPORARY_BIT = 1,
} VkFenceImportFlagBits;

typedef struct VkExportFenceCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkExternalFenceHandleTypeFlags handleTypes;
} VkExportFenceCreateInfo;

typedef VkFlags VkSemaphoreImportFlags;

typedef enum {
  VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1,
} VkSemaphoreImportFlagBits;

typedef VkFlags VkExternalSemaphoreHandleTypeFlags;

typedef struct VkExportSemaphoreCreateInfo {
  VkStructureType sType;
  const void* pNext;
  VkExternalSemaphoreHandleTypeFlags handleTypes;
} VkExportSemaphoreCreateInfo;

typedef enum {
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8,
  VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16,
} VkExternalSemaphoreHandleTypeFlagBits;

typedef VkFlags VkExternalSemaphoreFeatureFlags;

typedef enum {
  VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1,
  VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2,
} VkExternalSemaphoreFeatureFlagBits;

typedef struct VkPhysicalDeviceExternalSemaphoreInfo {
  VkStructureType sType;
  const void* pNext;
  VkExternalSemaphoreHandleTypeFlagBits handleType;
} VkPhysicalDeviceExternalSemaphoreInfo;

typedef struct VkExternalSemaphoreProperties {
  VkStructureType sType;
  void* pNext;
  VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes;
  VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes;
  VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures;
} VkExternalSemaphoreProperties;

typedef struct VkPhysicalDeviceMaintenance3Properties {
  VkStructureType sType;
  void* pNext;
  u32 maxPerSetDescriptors;
  VkDeviceSize maxMemoryAllocationSize;
} VkPhysicalDeviceMaintenance3Properties;

typedef struct VkDescriptorSetLayoutSupport {
  VkStructureType sType;
  void* pNext;
  VkBool32 supported;
} VkDescriptorSetLayoutSupport;

typedef struct VkPhysicalDeviceShaderDrawParametersFeatures {
  VkStructureType sType;
  void* pNext;
  VkBool32 shaderDrawParameters;
} VkPhysicalDeviceShaderDrawParametersFeatures;

typedef enum {
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256,
  VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096,
} VkDebugUtilsMessageSeverityFlagBitsEXT;

typedef VkFlags VkDebugUtilsMessageTypeFlagsEXT;

typedef VkFlags VkDebugUtilsMessengerCallbackDataFlagsEXT;

typedef struct VkDebugUtilsLabelEXT {
  VkStructureType sType;
  const void* pNext;
  const char* pLabelName;
  f32 color[4];
} VkDebugUtilsLabelEXT;

typedef struct VkDebugUtilsObjectNameInfoEXT {
  VkStructureType sType;
  const void* pNext;
  VkObjectType objectType;
  u64 objectHandle;
  const char* pObjectName;
} VkDebugUtilsObjectNameInfoEXT;

typedef struct VkDebugUtilsMessengerCallbackDataEXT {
  VkStructureType sType;
  const void* pNext;
  VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
  const char* pMessageIdName;
  i32 messageIdNumber;
  const char* pMessage;
  u32 queueLabelCount;
  const VkDebugUtilsLabelEXT* pQueueLabels;
  u32 cmdBufLabelCount;
  const VkDebugUtilsLabelEXT* pCmdBufLabels;
  u32 objectCount;
  const VkDebugUtilsObjectNameInfoEXT* pObjects;
} VkDebugUtilsMessengerCallbackDataEXT;

typedef VkBool32 (SYS_DECL* PFN_vkDebugUtilsMessengerCallbackEXT)(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData, void* pUserData);

typedef VkFlags VkDebugUtilsMessageSeverityFlagsEXT;

typedef enum {
  VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1,
  VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2,
  VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4,
} VkDebugUtilsMessageTypeFlagBitsEXT;

typedef VkFlags VkDebugUtilsMessengerCreateFlagsEXT;

typedef struct VkDebugUtilsMessengerCreateInfoEXT {
  VkStructureType sType;
  const void* pNext;
  VkDebugUtilsMessengerCreateFlagsEXT flags;
  VkDebugUtilsMessageSeverityFlagsEXT messageSeverity;
  VkDebugUtilsMessageTypeFlagsEXT messageType;
  PFN_vkDebugUtilsMessengerCallbackEXT pfnUserCallback;
  void* pUserData;
} VkDebugUtilsMessengerCreateInfoEXT;

typedef struct VkDebugUtilsMessengerEXT_T* VkDebugUtilsMessengerEXT;

typedef struct VkDebugUtilsObjectTagInfoEXT {
  VkStructureType sType;
  const void* pNext;
  VkObjectType objectType;
  u64 objectHandle;
  u64 tagName;
  usize tagSize;
  const void* pTag;
} VkDebugUtilsObjectTagInfoEXT;

typedef struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
  VkStructureType sType;
  void* pNext;
  VkDeviceSize heapBudget[VK_MAX_MEMORY_HEAPS];
  VkDeviceSize heapUsage[VK_MAX_MEMORY_HEAPS];
} VkPhysicalDeviceMemoryBudgetPropertiesEXT;

typedef struct VkPhysicalDeviceRobustness2FeaturesEXT {
  VkStructureType sType;
  void* pNext;
  VkBool32 robustBufferAccess2;
  VkBool32 robustImageAccess2;
  VkBool32 nullDescriptor;
} VkPhysicalDeviceRobustness2FeaturesEXT;

typedef struct VkPhysicalDeviceRobustness2PropertiesEXT {
  VkStructureType sType;
  void* pNext;
  VkDeviceSize robustStorageBufferAccessSizeAlignment;
  VkDeviceSize robustUniformBufferAccessSizeAlignment;
} VkPhysicalDeviceRobustness2PropertiesEXT;

typedef enum {
  VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
  VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
  VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
  VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
  VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4,
} VkValidationFeatureEnableEXT;

typedef enum {
  VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
  VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
  VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
  VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
  VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
  VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
  VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
  VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7,
} VkValidationFeatureDisableEXT;

typedef struct VkValidationFeaturesEXT {
  VkStructureType sType;
  const void* pNext;
  u32 enabledValidationFeatureCount;
  const VkValidationFeatureEnableEXT* pEnabledValidationFeatures;
  u32 disabledValidationFeatureCount;
  const VkValidationFeatureDisableEXT* pDisabledValidationFeatures;
} VkValidationFeaturesEXT;

typedef enum {
  VK_DRIVER_ID_AMD_PROPRIETARY = 1,
  VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,
  VK_DRIVER_ID_MESA_RADV = 3,
  VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,
  VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
  VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
  VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
  VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
  VK_DRIVER_ID_ARM_PROPRIETARY = 9,
  VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
  VK_DRIVER_ID_GGP_PROPRIETARY = 11,
  VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12,
  VK_DRIVER_ID_MESA_LLVMPIPE = 13,
  VK_DRIVER_ID_MOLTENVK = 14,
  VK_DRIVER_ID_COREAVI_PROPRIETARY = 15,
  VK_DRIVER_ID_JUICE_PROPRIETARY = 16,
  VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17,
  VK_DRIVER_ID_MESA_TURNIP = 18,
  VK_DRIVER_ID_MESA_V3DV = 19,
  VK_DRIVER_ID_MESA_PANVK = 20,
  VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21,
  VK_DRIVER_ID_MESA_VENUS = 22,
  VK_DRIVER_ID_MESA_DOZEN = 23,
  VK_DRIVER_ID_MESA_NVK = 24,
  VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 25,
  VK_DRIVER_ID_MESA_HONEYKRISP = 26,
  VK_DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN = 27,
} VkDriverId;

typedef struct VkConformanceVersion {
  u8 major;
  u8 minor;
  u8 subminor;
  u8 patch;
} VkConformanceVersion;

typedef struct VkPhysicalDeviceDriverProperties {
  VkStructureType sType;
  void* pNext;
  VkDriverId driverID;
  char driverName[VK_MAX_DRIVER_NAME_SIZE];
  char driverInfo[VK_MAX_DRIVER_INFO_SIZE];
  VkConformanceVersion conformanceVersion;
} VkPhysicalDeviceDriverProperties;

typedef struct VkPhysicalDeviceMaintenance4Features {
  VkStructureType sType;
  void* pNext;
  VkBool32 maintenance4;
} VkPhysicalDeviceMaintenance4Features;

typedef struct VkPhysicalDeviceMaintenance4Properties {
  VkStructureType sType;
  void* pNext;
  VkDeviceSize maxBufferSize;
} VkPhysicalDeviceMaintenance4Properties;

typedef struct VkDeviceBufferMemoryRequirements {
  VkStructureType sType;
  const void* pNext;
  const VkBufferCreateInfo* pCreateInfo;
} VkDeviceBufferMemoryRequirements;

typedef struct VkDeviceImageMemoryRequirements {
  VkStructureType sType;
  const void* pNext;
  const VkImageCreateInfo* pCreateInfo;
  VkImageAspectFlagBits planeAspect;
} VkDeviceImageMemoryRequirements;

typedef struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
  VkStructureType sType;
  void* pNext;
  VkBool32 pipelineExecutableInfo;
} VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;

typedef struct VkPipelineInfoKHR {
  VkStructureType sType;
  const void* pNext;
  VkPipeline pipeline;
} VkPipelineInfoKHR;

typedef struct VkPipelineExecutablePropertiesKHR {
  VkStructureType sType;
  void* pNext;
  VkShaderStageFlags stages;
  char name[VK_MAX_DESCRIPTION_SIZE];
  char description[VK_MAX_DESCRIPTION_SIZE];
  u32 subgroupSize;
} VkPipelineExecutablePropertiesKHR;

typedef struct VkPipelineExecutableInfoKHR {
  VkStructureType sType;
  const void* pNext;
  VkPipeline pipeline;
  u32 executableIndex;
} VkPipelineExecutableInfoKHR;

typedef enum {
  VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
  VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
  VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
  VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
} VkPipelineExecutableStatisticFormatKHR;

typedef union VkPipelineExecutableStatisticValueKHR {
  VkBool32 b32;
  i64 i64;
  u64 u64;
  f64 f64;
} VkPipelineExecutableStatisticValueKHR;

typedef struct VkPipelineExecutableStatisticKHR {
  VkStructureType sType;
  void* pNext;
  char name[VK_MAX_DESCRIPTION_SIZE];
  char description[VK_MAX_DESCRIPTION_SIZE];
  VkPipelineExecutableStatisticFormatKHR format;
  VkPipelineExecutableStatisticValueKHR value;
} VkPipelineExecutableStatisticKHR;

typedef struct VkPipelineExecutableInternalRepresentationKHR {
  VkStructureType sType;
  void* pNext;
  char name[VK_MAX_DESCRIPTION_SIZE];
  char description[VK_MAX_DESCRIPTION_SIZE];
  VkBool32 isText;
  usize dataSize;
  void* pData;
} VkPipelineExecutableInternalRepresentationKHR;

typedef struct VkPresentIdKHR {
  VkStructureType sType;
  const void* pNext;
  u32 swapchainCount;
  const u64* pPresentIds;
} VkPresentIdKHR;

typedef struct VkPhysicalDevicePresentIdFeaturesKHR {
  VkStructureType sType;
  void* pNext;
  VkBool32 presentId;
} VkPhysicalDevicePresentIdFeaturesKHR;

typedef struct VkSwapchainKHR_T* VkSwapchainKHR;

typedef struct VkPhysicalDevicePresentWaitFeaturesKHR {
  VkStructureType sType;
  void* pNext;
  VkBool32 presentWait;
} VkPhysicalDevicePresentWaitFeaturesKHR;

typedef struct VkSurfaceKHR_T* VkSurfaceKHR;

typedef enum {
  VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1,
  VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2,
  VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4,
  VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64,
  VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128,
  VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256,
} VkSurfaceTransformFlagBitsKHR;

typedef enum {
  VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
  VK_PRESENT_MODE_MAILBOX_KHR = 1,
  VK_PRESENT_MODE_FIFO_KHR = 2,
  VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
} VkPresentModeKHR;

typedef enum {
  VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
} VkColorSpaceKHR;

typedef enum {
  VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1,
  VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2,
  VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4,
  VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8,
} VkCompositeAlphaFlagBitsKHR;

typedef VkFlags VkCompositeAlphaFlagsKHR;

typedef VkFlags VkSurfaceTransformFlagsKHR;

typedef struct VkSurfaceCapabilitiesKHR {
  u32 minImageCount;
  u32 maxImageCount;
  VkExtent2D currentExtent;
  VkExtent2D minImageExtent;
  VkExtent2D maxImageExtent;
  u32 maxImageArrayLayers;
  VkSurfaceTransformFlagsKHR supportedTransforms;
  VkSurfaceTransformFlagBitsKHR currentTransform;
  VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
  VkImageUsageFlags supportedUsageFlags;
} VkSurfaceCapabilitiesKHR;

typedef struct VkSurfaceFormatKHR {
  VkFormat format;
  VkColorSpaceKHR colorSpace;
} VkSurfaceFormatKHR;

typedef enum {
  VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1,
  VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2,
} VkSwapchainCreateFlagBitsKHR;

typedef VkFlags VkSwapchainCreateFlagsKHR;

typedef struct VkSwapchainCreateInfoKHR {
  VkStructureType sType;
  const void* pNext;
  VkSwapchainCreateFlagsKHR flags;
  VkSurfaceKHR surface;
  u32 minImageCount;
  VkFormat imageFormat;
  VkColorSpaceKHR imageColorSpace;
  VkExtent2D imageExtent;
  u32 imageArrayLayers;
  VkImageUsageFlags imageUsage;
  VkSharingMode imageSharingMode;
  u32 queueFamilyIndexCount;
  const u32* pQueueFamilyIndices;
  VkSurfaceTransformFlagBitsKHR preTransform;
  VkCompositeAlphaFlagBitsKHR compositeAlpha;
  VkPresentModeKHR presentMode;
  VkBool32 clipped;
  VkSwapchainKHR oldSwapchain;
} VkSwapchainCreateInfoKHR;

typedef struct VkPresentInfoKHR {
  VkStructureType sType;
  const void* pNext;
  u32 waitSemaphoreCount;
  const VkSemaphore* pWaitSemaphores;
  u32 swapchainCount;
  const VkSwapchainKHR* pSwapchains;
  const u32* pImageIndices;
  VkResult* pResults;
} VkPresentInfoKHR;

typedef struct VkImageSwapchainCreateInfoKHR {
  VkStructureType sType;
  const void* pNext;
  VkSwapchainKHR swapchain;
} VkImageSwapchainCreateInfoKHR;

typedef struct VkBindImageMemorySwapchainInfoKHR {
  VkStructureType sType;
  const void* pNext;
  VkSwapchainKHR swapchain;
  u32 imageIndex;
} VkBindImageMemorySwapchainInfoKHR;

typedef struct VkAcquireNextImageInfoKHR {
  VkStructureType sType;
  const void* pNext;
  VkSwapchainKHR swapchain;
  u64 timeout;
  VkSemaphore semaphore;
  VkFence fence;
  u32 deviceMask;
} VkAcquireNextImageInfoKHR;

typedef enum {
  VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1,
  VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2,
  VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4,
  VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8,
} VkDeviceGroupPresentModeFlagBitsKHR;

typedef VkFlags VkDeviceGroupPresentModeFlagsKHR;

typedef struct VkDeviceGroupPresentCapabilitiesKHR {
  VkStructureType sType;
  void* pNext;
  u32 presentMask[VK_MAX_DEVICE_GROUP_SIZE];
  VkDeviceGroupPresentModeFlagsKHR modes;
} VkDeviceGroupPresentCapabilitiesKHR;

typedef struct VkDeviceGroupPresentInfoKHR {
  VkStructureType sType;
  const void* pNext;
  u32 swapchainCount;
  const u32* pDeviceMasks;
  VkDeviceGroupPresentModeFlagBitsKHR mode;
} VkDeviceGroupPresentInfoKHR;

typedef struct VkDeviceGroupSwapchainCreateInfoKHR {
  VkStructureType sType;
  const void* pNext;
  VkDeviceGroupPresentModeFlagsKHR modes;
} VkDeviceGroupSwapchainCreateInfoKHR;

typedef VkFlags VkWin32SurfaceCreateFlagsKHR;

typedef struct VkWin32SurfaceCreateInfoKHR {
  VkStructureType sType;
  const void* pNext;
  VkWin32SurfaceCreateFlagsKHR flags;
  uptr hinstance;
  uptr hwnd;
} VkWin32SurfaceCreateInfoKHR;

typedef VkFlags VkXcbSurfaceCreateFlagsKHR;

typedef struct VkXcbSurfaceCreateInfoKHR {
  VkStructureType sType;
  const void* pNext;
  VkXcbSurfaceCreateFlagsKHR flags;
  uptr connection;
  uptr window;
} VkXcbSurfaceCreateInfoKHR;

String vkResultStr(VkResult);
String vkPhysicalDeviceTypeStr(VkPhysicalDeviceType);
String vkColorSpaceKHRStr(VkColorSpaceKHR);
String vkPresentModeKHRStr(VkPresentModeKHR);
String vkVendorIdStr(VkVendorId);
String vkFormatStr(VkFormat);
u32 vkFormatByteSize(VkFormat);
u32 vkFormatComponents(VkFormat);
bool vkFormatCompressed4x4(VkFormat);

typedef struct VkInterfaceLoader {
  VkResult (SYS_DECL* createInstance)(const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance);
  PFN_vkVoidFunction (SYS_DECL* getInstanceProcAddr)(VkInstance instance, const char* pName);
  VkResult (SYS_DECL* enumerateInstanceExtensionProperties)(const char* pLayerName, u32* pPropertyCount, VkExtensionProperties* pProperties);
  VkResult (SYS_DECL* enumerateInstanceLayerProperties)(u32* pPropertyCount, VkLayerProperties* pProperties);
  VkResult (SYS_DECL* enumerateInstanceVersion)(u32* pApiVersion);
} VkInterfaceLoader;

VkResult vkLoadLoader(const DynLib*, VkInterfaceLoader* out);

typedef struct VkInterfaceInstance {
  void (SYS_DECL* destroyInstance)(VkInstance instance, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* enumeratePhysicalDevices)(VkInstance instance, u32* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices);
  void (SYS_DECL* getPhysicalDeviceFeatures)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures);
  void (SYS_DECL* getPhysicalDeviceFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties);
  VkResult (SYS_DECL* getPhysicalDeviceImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties);
  void (SYS_DECL* getPhysicalDeviceProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties);
  void (SYS_DECL* getPhysicalDeviceQueueFamilyProperties)(VkPhysicalDevice physicalDevice, u32* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties);
  void (SYS_DECL* getPhysicalDeviceMemoryProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties);
  PFN_vkVoidFunction (SYS_DECL* getDeviceProcAddr)(VkDevice device, const char* pName);
  VkResult (SYS_DECL* createDevice)(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice);
  VkResult (SYS_DECL* enumerateDeviceExtensionProperties)(VkPhysicalDevice physicalDevice, const char* pLayerName, u32* pPropertyCount, VkExtensionProperties* pProperties);
  VkResult (SYS_DECL* enumerateDeviceLayerProperties)(VkPhysicalDevice physicalDevice, u32* pPropertyCount, VkLayerProperties* pProperties);
  void (SYS_DECL* getPhysicalDeviceSparseImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, u32* pPropertyCount, VkSparseImageFormatProperties* pProperties);
  VkResult (SYS_DECL* enumeratePhysicalDeviceGroups)(VkInstance instance, u32* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);
  void (SYS_DECL* getPhysicalDeviceFeatures2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures);
  void (SYS_DECL* getPhysicalDeviceProperties2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties);
  void (SYS_DECL* getPhysicalDeviceFormatProperties2)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties);
  VkResult (SYS_DECL* getPhysicalDeviceImageFormatProperties2)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties);
  void (SYS_DECL* getPhysicalDeviceQueueFamilyProperties2)(VkPhysicalDevice physicalDevice, u32* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties);
  void (SYS_DECL* getPhysicalDeviceMemoryProperties2)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties);
  void (SYS_DECL* getPhysicalDeviceSparseImageFormatProperties2)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, u32* pPropertyCount, VkSparseImageFormatProperties2* pProperties);
  void (SYS_DECL* getPhysicalDeviceExternalBufferProperties)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties);
  void (SYS_DECL* getPhysicalDeviceExternalFenceProperties)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties);
  void (SYS_DECL* getPhysicalDeviceExternalSemaphoreProperties)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties);
  VkResult (SYS_DECL* setDebugUtilsObjectNameEXT)(VkDevice device, const VkDebugUtilsObjectNameInfoEXT* pNameInfo);
  VkResult (SYS_DECL* setDebugUtilsObjectTagEXT)(VkDevice device, const VkDebugUtilsObjectTagInfoEXT* pTagInfo);
  void (SYS_DECL* queueBeginDebugUtilsLabelEXT)(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo);
  void (SYS_DECL* queueEndDebugUtilsLabelEXT)(VkQueue queue);
  void (SYS_DECL* queueInsertDebugUtilsLabelEXT)(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo);
  void (SYS_DECL* cmdBeginDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo);
  void (SYS_DECL* cmdEndDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer);
  void (SYS_DECL* cmdInsertDebugUtilsLabelEXT)(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo);
  VkResult (SYS_DECL* createDebugUtilsMessengerEXT)(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger);
  void (SYS_DECL* destroyDebugUtilsMessengerEXT)(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks* pAllocator);
  void (SYS_DECL* submitDebugUtilsMessageEXT)(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData);
  void (SYS_DECL* destroySurfaceKHR)(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* getPhysicalDeviceSurfaceSupportKHR)(VkPhysicalDevice physicalDevice, u32 queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported);
  VkResult (SYS_DECL* getPhysicalDeviceSurfaceCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);
  VkResult (SYS_DECL* getPhysicalDeviceSurfaceFormatsKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, u32* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats);
  VkResult (SYS_DECL* getPhysicalDeviceSurfacePresentModesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, u32* pPresentModeCount, VkPresentModeKHR* pPresentModes);
  VkResult (SYS_DECL* getPhysicalDevicePresentRectanglesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, u32* pRectCount, VkRect2D* pRects);
  VkResult (SYS_DECL* createWin32SurfaceKHR)(VkInstance instance, const VkWin32SurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
  VkBool32 (SYS_DECL* getPhysicalDeviceWin32PresentationSupportKHR)(VkPhysicalDevice physicalDevice, u32 queueFamilyIndex);
  VkResult (SYS_DECL* createXcbSurfaceKHR)(VkInstance instance, const VkXcbSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
  VkBool32 (SYS_DECL* getPhysicalDeviceXcbPresentationSupportKHR)(VkPhysicalDevice physicalDevice, u32 queueFamilyIndex, uptr connection, u32 visual_id);
} VkInterfaceInstance;

VkResult vkLoadInstance(VkInstance, const VkInterfaceLoader*, VkInterfaceInstance* out);

typedef struct VkInterfaceDevice {
  void (SYS_DECL* destroyDevice)(VkDevice device, const VkAllocationCallbacks* pAllocator);
  void (SYS_DECL* getDeviceQueue)(VkDevice device, u32 queueFamilyIndex, u32 queueIndex, VkQueue* pQueue);
  VkResult (SYS_DECL* queueSubmit)(VkQueue queue, u32 submitCount, const VkSubmitInfo* pSubmits, VkFence fence);
  VkResult (SYS_DECL* queueWaitIdle)(VkQueue queue);
  VkResult (SYS_DECL* deviceWaitIdle)(VkDevice device);
  VkResult (SYS_DECL* allocateMemory)(VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory);
  void (SYS_DECL* freeMemory)(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* mapMemory)(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData);
  void (SYS_DECL* unmapMemory)(VkDevice device, VkDeviceMemory memory);
  VkResult (SYS_DECL* flushMappedMemoryRanges)(VkDevice device, u32 memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges);
  VkResult (SYS_DECL* invalidateMappedMemoryRanges)(VkDevice device, u32 memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges);
  void (SYS_DECL* getDeviceMemoryCommitment)(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes);
  VkResult (SYS_DECL* bindBufferMemory)(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);
  VkResult (SYS_DECL* bindImageMemory)(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);
  void (SYS_DECL* getBufferMemoryRequirements)(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements);
  void (SYS_DECL* getImageMemoryRequirements)(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements);
  void (SYS_DECL* getImageSparseMemoryRequirements)(VkDevice device, VkImage image, u32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements);
  VkResult (SYS_DECL* queueBindSparse)(VkQueue queue, u32 bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence);
  VkResult (SYS_DECL* createFence)(VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence);
  void (SYS_DECL* destroyFence)(VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* resetFences)(VkDevice device, u32 fenceCount, const VkFence* pFences);
  VkResult (SYS_DECL* getFenceStatus)(VkDevice device, VkFence fence);
  VkResult (SYS_DECL* waitForFences)(VkDevice device, u32 fenceCount, const VkFence* pFences, VkBool32 waitAll, u64 timeout);
  VkResult (SYS_DECL* createSemaphore)(VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore);
  void (SYS_DECL* destroySemaphore)(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* createEvent)(VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent);
  void (SYS_DECL* destroyEvent)(VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* getEventStatus)(VkDevice device, VkEvent event);
  VkResult (SYS_DECL* setEvent)(VkDevice device, VkEvent event);
  VkResult (SYS_DECL* resetEvent)(VkDevice device, VkEvent event);
  VkResult (SYS_DECL* createQueryPool)(VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool);
  void (SYS_DECL* destroyQueryPool)(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* getQueryPoolResults)(VkDevice device, VkQueryPool queryPool, u32 firstQuery, u32 queryCount, usize dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags);
  VkResult (SYS_DECL* createBuffer)(VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer);
  void (SYS_DECL* destroyBuffer)(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* createBufferView)(VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView);
  void (SYS_DECL* destroyBufferView)(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* createImage)(VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage);
  void (SYS_DECL* destroyImage)(VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator);
  void (SYS_DECL* getImageSubresourceLayout)(VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout);
  VkResult (SYS_DECL* createImageView)(VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView);
  void (SYS_DECL* destroyImageView)(VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* createShaderModule)(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule);
  void (SYS_DECL* destroyShaderModule)(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* createPipelineCache)(VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache);
  void (SYS_DECL* destroyPipelineCache)(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* getPipelineCacheData)(VkDevice device, VkPipelineCache pipelineCache, usize* pDataSize, void* pData);
  VkResult (SYS_DECL* mergePipelineCaches)(VkDevice device, VkPipelineCache dstCache, u32 srcCacheCount, const VkPipelineCache* pSrcCaches);
  VkResult (SYS_DECL* createGraphicsPipelines)(VkDevice device, VkPipelineCache pipelineCache, u32 createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);
  VkResult (SYS_DECL* createComputePipelines)(VkDevice device, VkPipelineCache pipelineCache, u32 createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);
  void (SYS_DECL* destroyPipeline)(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* createPipelineLayout)(VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout);
  void (SYS_DECL* destroyPipelineLayout)(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* createSampler)(VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler);
  void (SYS_DECL* destroySampler)(VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* createDescriptorSetLayout)(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout);
  void (SYS_DECL* destroyDescriptorSetLayout)(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* createDescriptorPool)(VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool);
  void (SYS_DECL* destroyDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* resetDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);
  VkResult (SYS_DECL* allocateDescriptorSets)(VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets);
  VkResult (SYS_DECL* freeDescriptorSets)(VkDevice device, VkDescriptorPool descriptorPool, u32 descriptorSetCount, const VkDescriptorSet* pDescriptorSets);
  void (SYS_DECL* updateDescriptorSets)(VkDevice device, u32 descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, u32 descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies);
  VkResult (SYS_DECL* createFramebuffer)(VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer);
  void (SYS_DECL* destroyFramebuffer)(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* createRenderPass)(VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass);
  void (SYS_DECL* destroyRenderPass)(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator);
  void (SYS_DECL* getRenderAreaGranularity)(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity);
  VkResult (SYS_DECL* createCommandPool)(VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool);
  void (SYS_DECL* destroyCommandPool)(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* resetCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
  VkResult (SYS_DECL* allocateCommandBuffers)(VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers);
  void (SYS_DECL* freeCommandBuffers)(VkDevice device, VkCommandPool commandPool, u32 commandBufferCount, const VkCommandBuffer* pCommandBuffers);
  VkResult (SYS_DECL* beginCommandBuffer)(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo);
  VkResult (SYS_DECL* endCommandBuffer)(VkCommandBuffer commandBuffer);
  VkResult (SYS_DECL* resetCommandBuffer)(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);
  void (SYS_DECL* cmdBindPipeline)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
  void (SYS_DECL* cmdSetViewport)(VkCommandBuffer commandBuffer, u32 firstViewport, u32 viewportCount, const VkViewport* pViewports);
  void (SYS_DECL* cmdSetScissor)(VkCommandBuffer commandBuffer, u32 firstScissor, u32 scissorCount, const VkRect2D* pScissors);
  void (SYS_DECL* cmdSetLineWidth)(VkCommandBuffer commandBuffer, f32 lineWidth);
  void (SYS_DECL* cmdSetDepthBias)(VkCommandBuffer commandBuffer, f32 depthBiasConstantFactor, f32 depthBiasClamp, f32 depthBiasSlopeFactor);
  void (SYS_DECL* cmdSetBlendConstants)(VkCommandBuffer commandBuffer, const f32 blendConstants[4]);
  void (SYS_DECL* cmdSetDepthBounds)(VkCommandBuffer commandBuffer, f32 minDepthBounds, f32 maxDepthBounds);
  void (SYS_DECL* cmdSetStencilCompareMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, u32 compareMask);
  void (SYS_DECL* cmdSetStencilWriteMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, u32 writeMask);
  void (SYS_DECL* cmdSetStencilReference)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, u32 reference);
  void (SYS_DECL* cmdBindDescriptorSets)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, u32 firstSet, u32 descriptorSetCount, const VkDescriptorSet* pDescriptorSets, u32 dynamicOffsetCount, const u32* pDynamicOffsets);
  void (SYS_DECL* cmdBindIndexBuffer)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
  void (SYS_DECL* cmdBindVertexBuffers)(VkCommandBuffer commandBuffer, u32 firstBinding, u32 bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets);
  void (SYS_DECL* cmdDraw)(VkCommandBuffer commandBuffer, u32 vertexCount, u32 instanceCount, u32 firstVertex, u32 firstInstance);
  void (SYS_DECL* cmdDrawIndexed)(VkCommandBuffer commandBuffer, u32 indexCount, u32 instanceCount, u32 firstIndex, i32 vertexOffset, u32 firstInstance);
  void (SYS_DECL* cmdDrawIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, u32 drawCount, u32 stride);
  void (SYS_DECL* cmdDrawIndexedIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, u32 drawCount, u32 stride);
  void (SYS_DECL* cmdDispatch)(VkCommandBuffer commandBuffer, u32 groupCountX, u32 groupCountY, u32 groupCountZ);
  void (SYS_DECL* cmdDispatchIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
  void (SYS_DECL* cmdCopyBuffer)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, u32 regionCount, const VkBufferCopy* pRegions);
  void (SYS_DECL* cmdCopyImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, u32 regionCount, const VkImageCopy* pRegions);
  void (SYS_DECL* cmdBlitImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, u32 regionCount, const VkImageBlit* pRegions, VkFilter filter);
  void (SYS_DECL* cmdCopyBufferToImage)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, u32 regionCount, const VkBufferImageCopy* pRegions);
  void (SYS_DECL* cmdCopyImageToBuffer)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, u32 regionCount, const VkBufferImageCopy* pRegions);
  void (SYS_DECL* cmdUpdateBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData);
  void (SYS_DECL* cmdFillBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, u32 data);
  void (SYS_DECL* cmdClearColorImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, u32 rangeCount, const VkImageSubresourceRange* pRanges);
  void (SYS_DECL* cmdClearDepthStencilImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, u32 rangeCount, const VkImageSubresourceRange* pRanges);
  void (SYS_DECL* cmdClearAttachments)(VkCommandBuffer commandBuffer, u32 attachmentCount, const VkClearAttachment* pAttachments, u32 rectCount, const VkClearRect* pRects);
  void (SYS_DECL* cmdResolveImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, u32 regionCount, const VkImageResolve* pRegions);
  void (SYS_DECL* cmdSetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
  void (SYS_DECL* cmdResetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
  void (SYS_DECL* cmdWaitEvents)(VkCommandBuffer commandBuffer, u32 eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, u32 memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, u32 bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, u32 imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);
  void (SYS_DECL* cmdPipelineBarrier)(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, u32 memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, u32 bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, u32 imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);
  void (SYS_DECL* cmdBeginQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, u32 query, VkQueryControlFlags flags);
  void (SYS_DECL* cmdEndQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, u32 query);
  void (SYS_DECL* cmdResetQueryPool)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, u32 firstQuery, u32 queryCount);
  void (SYS_DECL* cmdWriteTimestamp)(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, u32 query);
  void (SYS_DECL* cmdCopyQueryPoolResults)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, u32 firstQuery, u32 queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
  void (SYS_DECL* cmdPushConstants)(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, u32 offset, u32 size, const void* pValues);
  void (SYS_DECL* cmdBeginRenderPass)(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents);
  void (SYS_DECL* cmdNextSubpass)(VkCommandBuffer commandBuffer, VkSubpassContents contents);
  void (SYS_DECL* cmdEndRenderPass)(VkCommandBuffer commandBuffer);
  void (SYS_DECL* cmdExecuteCommands)(VkCommandBuffer commandBuffer, u32 commandBufferCount, const VkCommandBuffer* pCommandBuffers);
  VkResult (SYS_DECL* bindBufferMemory2)(VkDevice device, u32 bindInfoCount, const VkBindBufferMemoryInfo* pBindInfos);
  VkResult (SYS_DECL* bindImageMemory2)(VkDevice device, u32 bindInfoCount, const VkBindImageMemoryInfo* pBindInfos);
  void (SYS_DECL* getDeviceGroupPeerMemoryFeatures)(VkDevice device, u32 heapIndex, u32 localDeviceIndex, u32 remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);
  void (SYS_DECL* cmdSetDeviceMask)(VkCommandBuffer commandBuffer, u32 deviceMask);
  void (SYS_DECL* cmdDispatchBase)(VkCommandBuffer commandBuffer, u32 baseGroupX, u32 baseGroupY, u32 baseGroupZ, u32 groupCountX, u32 groupCountY, u32 groupCountZ);
  void (SYS_DECL* getImageMemoryRequirements2)(VkDevice device, const VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements);
  void (SYS_DECL* getBufferMemoryRequirements2)(VkDevice device, const VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements);
  void (SYS_DECL* getImageSparseMemoryRequirements2)(VkDevice device, const VkImageSparseMemoryRequirementsInfo2* pInfo, u32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
  void (SYS_DECL* trimCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
  void (SYS_DECL* getDeviceQueue2)(VkDevice device, const VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue);
  VkResult (SYS_DECL* createSamplerYcbcrConversion)(VkDevice device, const VkSamplerYcbcrConversionCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion);
  void (SYS_DECL* destroySamplerYcbcrConversion)(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* createDescriptorUpdateTemplate)(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);
  void (SYS_DECL* destroyDescriptorUpdateTemplate)(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator);
  void (SYS_DECL* updateDescriptorSetWithTemplate)(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void* pData);
  void (SYS_DECL* getDescriptorSetLayoutSupport)(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport);
  void (SYS_DECL* getDeviceBufferMemoryRequirements)(VkDevice device, const VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements);
  void (SYS_DECL* getDeviceImageMemoryRequirements)(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements);
  void (SYS_DECL* getDeviceImageSparseMemoryRequirements)(VkDevice device, const VkDeviceImageMemoryRequirements* pInfo, u32* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
  VkResult (SYS_DECL* getPipelineExecutablePropertiesKHR)(VkDevice device, const VkPipelineInfoKHR* pPipelineInfo, u32* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties);
  VkResult (SYS_DECL* getPipelineExecutableStatisticsKHR)(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, u32* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics);
  VkResult (SYS_DECL* getPipelineExecutableInternalRepresentationsKHR)(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, u32* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations);
  VkResult (SYS_DECL* waitForPresentKHR)(VkDevice device, VkSwapchainKHR swapchain, u64 presentId, u64 timeout);
  VkResult (SYS_DECL* createSwapchainKHR)(VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain);
  void (SYS_DECL* destroySwapchainKHR)(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator);
  VkResult (SYS_DECL* getSwapchainImagesKHR)(VkDevice device, VkSwapchainKHR swapchain, u32* pSwapchainImageCount, VkImage* pSwapchainImages);
  VkResult (SYS_DECL* acquireNextImageKHR)(VkDevice device, VkSwapchainKHR swapchain, u64 timeout, VkSemaphore semaphore, VkFence fence, u32* pImageIndex);
  VkResult (SYS_DECL* queuePresentKHR)(VkQueue queue, const VkPresentInfoKHR* pPresentInfo);
  VkResult (SYS_DECL* getDeviceGroupPresentCapabilitiesKHR)(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities);
  VkResult (SYS_DECL* getDeviceGroupSurfacePresentModesKHR)(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes);
  VkResult (SYS_DECL* acquireNextImage2KHR)(VkDevice device, const VkAcquireNextImageInfoKHR* pAcquireInfo, u32* pImageIndex);
} VkInterfaceDevice;

VkResult vkLoadDevice(VkDevice, const VkInterfaceInstance*, VkInterfaceDevice* out);

// clang-format on

name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    name: ${{matrix.config.name}}
    runs-on: ${{matrix.config.image}}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: linux,
            image: ubuntu-24.04,
            os: linux,
            toolchain: unix,
            cc: clang-18,
          }
        - {
            name: windows,
            image: windows-2025,
            os: windows,
            toolchain: msvc,
            cc: clang,
          }
    env:
      CC: ${{matrix.config.cc}}
      CMAKE_OPTS: >-
        -DFAST=On
        -DSIMD=On
        -DLTO=On
        -DTRACE=Off
        -DSANITIZE=Off
    steps:
    - name: checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: deps-cache
      uses: actions/cache@v4
      with:
        key: deps-${{matrix.config.image}}-001
        path: deps

    - name: deps-fetch-windows
      if: ${{steps.deps-cache.outputs.cache-hit != 'true'}}
      shell: pwsh
      run: |
        New-Item -Path "$env:GITHUB_WORKSPACE" -Name "deps" -ItemType "Directory"
        Invoke-WebRequest -Uri "https://bastian.tech/redist/win32-x64-2019/shaderc_shared.dll" `
                          -OutFile "deps\shaderc_shared.dll"

    - name: deps-prepare
      shell: bash
      run: echo "$GITHUB_WORKSPACE/deps" >> "$GITHUB_PATH"

    - name: prepare-linux
      if: matrix.config.os == 'linux'
      shell: bash
      run: |
        echo "Installing libshaderc"; sudo apt install libshaderc-dev

    - name: assets-cache
      uses: actions/cache@v4
      with:
        key: assets-${{github.sha}}
        restore-keys: assets-
        enableCrossOsArchive: true
        path: |
          assets/.cache
          assets/external

    - name: build-unix
      if: matrix.config.toolchain == 'unix'
      shell: bash
      run: |
        cmake -B build $CMAKE_OPTS &&
        make -s -C build app_game run.fetch run.pack

    - name: build-msvc
      if: matrix.config.toolchain == 'msvc'
      shell: pwsh
      run: |
        ./ci/env-win32.ps1                                                &&
        cmake -B build -G 'NMake Makefiles' $($env:CMAKE_OPTS -split ' ') &&
        cd build                                                          &&
        nmake /C app_game run.fetch run.pack

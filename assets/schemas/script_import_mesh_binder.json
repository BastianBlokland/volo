{
  "name": "import-mesh",
  "flags": [ "DisallowMemoryAccess" ],
  "filter": "import/mesh/*.script",
  "functions": [
    {
      "name": "joint_name_trim",
      "doc": "Remove a prefix (and optionally suffix) from the joint name at the given index. Returns the new name.",
      "sig": {
        "ret": "str",
        "args": [
          { "name": "index", "mask": "num" },
          { "name": "prefix", "mask": "str" },
          {
            "name": "suffix",
            "mask": [ "null", "str" ]
          }
        ]
      }
    },
    {
      "name": "root_scale",
      "doc": "Set the bone root import scale (only valid for skinned meshes).",
      "sig": {
        "ret": [ "null", "vec3" ],
        "args": [
          {
            "name": "scale",
            "mask": [ "null", "num", "vec3" ]
          }
        ]
      }
    },
    {
      "name": "joint_parent",
      "doc": "Query the index of the joint's parent (same as the input for the root).",
      "sig": {
        "ret": "num",
        "args": [
          { "name": "index", "mask": "num" }
        ]
      }
    },
    {
      "name": "fail_if",
      "doc": "Fail the import if the given value is truthy.",
      "sig": {
        "ret": "null",
        "args": [
          { "name": "condition", "mask": "bool" },
          { "name": "message", "mask": "str" }
        ]
      }
    },
    {
      "name": "fail",
      "doc": "Fail the import and log an error with the given values.",
      "sig": {
        "ret": "null",
        "args": [
          { "name": "values", "mask": "any", "multi": true }
        ]
      }
    },
    {
      "name": "anim_duration",
      "doc": "Query or change the animation duration.",
      "sig": {
        "ret": [ "null", "num" ],
        "args": [
          { "name": "index", "mask": "num" },
          {
            "name": "newDuration",
            "mask": [ "null", "num" ]
          }
        ]
      }
    },
    {
      "name": "joint_name_match",
      "doc": "Check if the joint name matches the given pattern.\n\nSupported pattern syntax:\n- '?' matches any single character.\n- '*' matches any number of any characters including none.\n- '!' inverts the entire match (not per segment and cannot be disabled after enabling).",
      "sig": {
        "ret": "bool",
        "args": [
          { "name": "index", "mask": "num" },
          { "name": "pattern", "mask": "str" }
        ]
      }
    },
    {
      "name": "anim_mask_fade_up",
      "doc": "Recursively apply the weight delta to all joints up the hierarchy starting from the given joint.",
      "sig": {
        "ret": "null",
        "args": [
          { "name": "index", "mask": "num" },
          { "name": "jointIndex", "mask": "num" },
          { "name": "deltaWeight", "mask": "num" }
        ]
      }
    },
    {
      "name": "anim_count",
      "doc": "Query the amount of animations in the mesh.",
      "sig": {
        "ret": [ "null", "num" ],
        "args": []
      }
    },
    {
      "name": "anim_flag",
      "doc": "Query or change an animation flag.\n\nSupported flags:\n\n-`Active`\n\n-`Loop`\n\n-`FadeIn`\n\n-`FadeOut`\n\n-`RandomTime`",
      "sig": {
        "ret": [ "null", "bool" ],
        "args": [
          { "name": "index", "mask": "num" },
          { "name": "flag", "mask": "str" },
          {
            "name": "enable",
            "mask": [ "null", "bool" ]
          }
        ]
      }
    },
    {
      "name": "anim_weight",
      "doc": "Query or change the initial animation weight.",
      "sig": {
        "ret": [ "null", "num" ],
        "args": [
          { "name": "index", "mask": "num" },
          {
            "name": "newWeight",
            "mask": [ "null", "num" ]
          }
        ]
      }
    },
    {
      "name": "root_rotation",
      "doc": "Set the bone root import rotation (only valid for skinned meshes).",
      "sig": {
        "ret": [ "null", "quat" ],
        "args": [
          {
            "name": "rotation",
            "mask": [ "null", "quat" ]
          }
        ]
      }
    },
    {
      "name": "vertex_rotation",
      "doc": "Set the vertex import rotation.",
      "sig": {
        "ret": [ "null", "quat" ],
        "args": [
          {
            "name": "rotation",
            "mask": [ "null", "quat" ]
          }
        ]
      }
    },
    {
      "name": "anim_name",
      "doc": "Query or change the name of the animation at the given index.",
      "sig": {
        "ret": [ "null", "str" ],
        "args": [
          { "name": "index", "mask": "num" },
          {
            "name": "newName",
            "mask": [ "null", "str" ]
          }
        ]
      }
    },
    {
      "name": "anim_layer",
      "doc": "Query or change the layer (sorting index) of the animation at the given index.",
      "sig": {
        "ret": [ "null", "num" ],
        "args": [
          { "name": "index", "mask": "num" },
          {
            "name": "newLayer",
            "mask": [ "null", "num" ]
          }
        ]
      }
    },
    {
      "name": "anim_speed",
      "doc": "Query or change the initial animation speed.",
      "sig": {
        "ret": [ "null", "num" ],
        "args": [
          { "name": "index", "mask": "num" },
          {
            "name": "newSpeed",
            "mask": [ "null", "num" ]
          },
          {
            "name": "newVariance",
            "mask": [ "null", "num" ]
          }
        ]
      }
    },
    {
      "name": "flat_normals",
      "doc": "Import flat (per face) normals (ignore per-vertex normals).",
      "sig": {
        "ret": [ "null", "bool" ],
        "args": [
          {
            "name": "flatNormals",
            "mask": [ "null", "bool" ]
          }
        ]
      }
    },
    {
      "name": "asset_id",
      "doc": "Lookup the identifier of the importing asset.",
      "sig": {
        "ret": "str",
        "args": []
      }
    },
    {
      "name": "joint_count",
      "doc": "Query the amount of joints in the mesh.\nThe joints are topologically sorted so the root is always at index 0.",
      "sig": {
        "ret": [ "null", "num" ],
        "args": []
      }
    },
    {
      "name": "log",
      "doc": "Log the given values.",
      "sig": {
        "ret": "null",
        "args": [
          { "name": "values", "mask": "any", "multi": true }
        ]
      }
    },
    {
      "name": "asset_id_match",
      "doc": "Match the identifier of the importing asset against the given glob pattern.\n\nSupported pattern syntax:\n- '?' matches any single character.\n- '*' matches any number of any characters including none.\n- '!' inverts the entire match (not per segment and cannot be disabled after enabling).",
      "sig": {
        "ret": "bool",
        "args": [
          { "name": "pattern", "mask": "str" }
        ]
      }
    },
    {
      "name": "vertex_scale",
      "doc": "Set the vertex import scale.",
      "sig": {
        "ret": [ "null", "vec3" ],
        "args": [
          {
            "name": "scale",
            "mask": [ "null", "num", "vec3" ]
          }
        ]
      }
    },
    {
      "name": "joint_find",
      "doc": "Find a joint with the given name, returns the index of the joint or null if none was found.",
      "sig": {
        "ret": [ "null", "num" ],
        "args": [
          { "name": "jointName", "mask": "str" }
        ]
      }
    },
    {
      "name": "anim_find",
      "doc": "Find an animation with the given name, returns the index of the animation or null if none was found.",
      "sig": {
        "ret": [ "null", "num" ],
        "args": [
          { "name": "animName", "mask": "str" }
        ]
      }
    },
    {
      "name": "anim_mask_fade_down",
      "doc": "Recursively apply the weight delta to all joints down the hierarchy starting from the given joint.",
      "sig": {
        "ret": "null",
        "args": [
          { "name": "index", "mask": "num" },
          { "name": "jointIndex", "mask": "num" },
          { "name": "deltaWeight", "mask": "num" }
        ]
      }
    },
    {
      "name": "asset_format",
      "doc": "Lookup the format of the importing asset.",
      "sig": {
        "ret": "str",
        "args": []
      }
    },
    {
      "name": "root_translation",
      "doc": "Set the bone root import translation (only valid for skinned meshes).",
      "sig": {
        "ret": [ "null", "vec3" ],
        "args": [
          {
            "name": "translation",
            "mask": [ "null", "vec3" ]
          }
        ]
      }
    },
    {
      "name": "vertex_translation",
      "doc": "Set the vertex import translation.",
      "sig": {
        "ret": [ "null", "vec3" ],
        "args": [
          {
            "name": "translation",
            "mask": [ "null", "vec3" ]
          }
        ]
      }
    },
    {
      "name": "anim_mask",
      "doc": "Query or change the mask weight for a specific joint.",
      "sig": {
        "ret": [ "null", "num" ],
        "args": [
          { "name": "index", "mask": "num" },
          { "name": "jointIndex", "mask": "num" },
          {
            "name": "newWeight",
            "mask": [ "null", "num" ]
          }
        ]
      }
    },
    {
      "name": "anim_mask_all",
      "doc": "Change the mask weight for all joints.",
      "sig": {
        "ret": "null",
        "args": [
          { "name": "index", "mask": "num" },
          { "name": "newWeight", "mask": "num" }
        ]
      }
    },
    {
      "name": "failed",
      "doc": "Check if the import has failed.",
      "sig": {
        "ret": "bool",
        "args": []
      }
    },
    {
      "name": "warn",
      "doc": "Log a warning with the given values.",
      "sig": {
        "ret": "null",
        "args": [
          { "name": "values", "mask": "any", "multi": true }
        ]
      }
    },
    {
      "name": "anim_time",
      "doc": "Query or change the initial animation time (in seconds).",
      "sig": {
        "ret": [ "null", "num" ],
        "args": [
          { "name": "index", "mask": "num" },
          {
            "name": "newTime",
            "mask": [ "null", "num" ]
          }
        ]
      }
    },
    {
      "name": "joint_name",
      "doc": "Query or change the name of the joint at the given index.",
      "sig": {
        "ret": [ "null", "str" ],
        "args": [
          { "name": "index", "mask": "num" },
          {
            "name": "newName",
            "mask": [ "null", "str" ]
          }
        ]
      }
    }
  ]
}
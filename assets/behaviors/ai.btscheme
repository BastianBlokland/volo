{
  "aliases": [
    {
      "identifier": "AssetBehavior",
      "values": [
        "AssetBehavior_Running",
        "AssetBehavior_Success",
        "AssetBehavior_Failure",
        "AssetBehavior_Invert",
        "AssetBehavior_Try",
        "AssetBehavior_Repeat",
        "AssetBehavior_Parallel",
        "AssetBehavior_Selector",
        "AssetBehavior_Sequence",
        "AssetBehavior_KnowledgeSet",
        "AssetBehavior_KnowledgeClear",
        "AssetBehavior_KnowledgeCheck",
        "AssetBehavior_KnowledgeCompare"
      ]
    },
    {
      "identifier": "AssetAiSource",
      "values": [
        "AssetAiSource_None",
        "AssetAiSource_Number",
        "AssetAiSource_Bool",
        "AssetAiSource_Vector",
        "AssetAiSource_Time",
        "AssetAiSource_Knowledge"
      ]
    }
  ],
  "enums": [
    {
      "identifier": "AssetAiComparison",
      "values": [
        {
          "value": 0,
          "name": "Equal"
        },
        {
          "value": 1,
          "name": "NotEqual"
        },
        {
          "value": 2,
          "name": "Less"
        },
        {
          "value": 3,
          "name": "LessOrEqual"
        },
        {
          "value": 4,
          "name": "Greater"
        },
        {
          "value": 5,
          "name": "GreaterOrEqual"
        }
      ]
    }
  ],
  "nodes": [
    {
      "nodeType": "AssetBehavior_Running",
      "fields": []
    },
    {
      "nodeType": "AssetBehavior_Success",
      "fields": []
    },
    {
      "nodeType": "AssetBehavior_Failure",
      "fields": []
    },
    {
      "nodeType": "AssetBehavior_Invert",
      "comment": "Evaluates the child node and inverts its result.\nEvaluates to 'Running' if the child evaluates to 'Running', 'Success' if the child evaluated to 'Failure', otherwise to 'Failure'.",
      "fields": [
        {
          "name": "child",
          "valueType": "AssetBehavior"
        }
      ]
    },
    {
      "nodeType": "AssetBehavior_Try",
      "comment": "Evaluates the child node.\nEvaluates to 'Running' if the child evaluates to 'Failure' or 'Running', otherwise to 'Success'.",
      "fields": [
        {
          "name": "child",
          "valueType": "AssetBehavior"
        }
      ]
    },
    {
      "nodeType": "AssetBehavior_Repeat",
      "comment": "Evaluates the child node.\nEvaluates to 'Running' if the child evaluates to 'Success' or 'Running', otherwise to 'Failure'.",
      "fields": [
        {
          "name": "child",
          "valueType": "AssetBehavior"
        }
      ]
    },
    {
      "nodeType": "AssetBehavior_Parallel",
      "comment": "Evaluates all children.\nEvaluates to 'Success' if any child evaluated to 'Success', 'Running' if any child evaluates to 'Running', otherwise to 'Failure'.",
      "fields": [
        {
          "name": "children",
          "isArray": true,
          "valueType": "AssetBehavior"
        }
      ]
    },
    {
      "nodeType": "AssetBehavior_Selector",
      "comment": "Evaluates children until a child evaluates to 'Running' or 'Success'.\nEvaluates to 'Success' if any child evaluated to 'Success', 'Running' if any child evaluated to 'Running', otherwise to 'Failure'.",
      "fields": [
        {
          "name": "children",
          "isArray": true,
          "valueType": "AssetBehavior"
        }
      ]
    },
    {
      "nodeType": "AssetBehavior_Sequence",
      "comment": "Evaluates children until a child evaluates to 'Failure'.\nEvaluates to 'Success' if all children evaluated to 'Success', 'Running' if any child evaluated to 'Running', otherwise to 'Failure'.",
      "fields": [
        {
          "name": "children",
          "isArray": true,
          "valueType": "AssetBehavior"
        }
      ]
    },
    {
      "nodeType": "AssetBehavior_KnowledgeSet",
      "comment": "Assign knowledge to the given key.\nNote: Knowledge will be added if it does not exist.\nEvaluates to 'Success'.",
      "fields": [
        {
          "name": "key",
          "valueType": "string"
        },
        {
          "name": "value",
          "valueType": "AssetAiSource"
        }
      ]
    },
    {
      "nodeType": "AssetAiSource_None",
      "fields": []
    },
    {
      "nodeType": "AssetAiSource_Number",
      "fields": [
        {
          "name": "value",
          "valueType": "number"
        }
      ]
    },
    {
      "nodeType": "AssetAiSource_Bool",
      "fields": [
        {
          "name": "value",
          "valueType": "boolean"
        }
      ]
    },
    {
      "nodeType": "AssetAiSource_Vector",
      "fields": [
        {
          "name": "x",
          "valueType": "number"
        },
        {
          "name": "y",
          "valueType": "number"
        },
        {
          "name": "z",
          "valueType": "number"
        }
      ]
    },
    {
      "nodeType": "AssetAiSource_Time",
      "fields": [
        {
          "name": "secondsFromNow",
          "valueType": "number"
        }
      ]
    },
    {
      "nodeType": "AssetAiSource_Knowledge",
      "fields": [
        {
          "name": "key",
          "valueType": "string"
        }
      ]
    },
    {
      "nodeType": "AssetBehavior_KnowledgeClear",
      "comment": "Clear all the given knowledge keys.\nEvaluates to 'Success'.",
      "fields": [
        {
          "name": "keys",
          "isArray": true,
          "valueType": "string"
        }
      ]
    },
    {
      "nodeType": "AssetBehavior_KnowledgeCheck",
      "comment": "Check if knowledge exists for all the given keys.\nEvaluates to 'Success'.",
      "fields": [
        {
          "name": "keys",
          "isArray": true,
          "valueType": "string"
        }
      ]
    },
    {
      "nodeType": "AssetBehavior_KnowledgeCompare",
      "comment": "Compare the knowledge value at the given key to a value source.\nEvaluates to 'Success' or 'Failure'.",
      "fields": [
        {
          "name": "comparison",
          "valueType": "AssetAiComparison"
        },
        {
          "name": "key",
          "valueType": "string"
        },
        {
          "name": "value",
          "valueType": "AssetAiSource"
        }
      ]
    }
  ],
  "rootAlias": "AssetBehavior",
  "featureNodeNames": true
}